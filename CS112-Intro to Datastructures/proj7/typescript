Script started on Tue 02 Apr 2013 04:30:11 PM EDT
jlm54@knuth:~/cs112/proj7$ ls
Debug	     inputFile.txt    Stack.cpp		StackTester.cpp  typescript
Decoder.cpp  outputFile2.txt  StackException.h	StackTester.h
Decoder.h    outputFile.txt   Stack.h		tester.cpp
jlm54@knuth:~/cs112/proj7$ cat *.txt[K[K[Kcpp *.txt[K[K[Kh *.txt
/* Decoder.cpp - a class used to encode / decode text
* by Joshua Maguire for cs 112 on 4/1/2013
*/

#include "Decoder.h"

//constructor. because class is at this point so simple, this doesn't do anything.
Decoder::Decoder(void)
{
}

//unneccacarry 
Decoder::~Decoder(void)
{
}

/*decode method.
*parameter: string outFileName, string inFileName -names of txt's to use for getting text(in) and dumping coded text(out)
*post condition: txt red in from inFileName  decoded/encoded and dumped in outputFile.txt
*/

void Decoder::Decode( string inFileName,string outFileName)
{
	ofstream out(outFileName.c_str());
	ifstream in(inFileName.c_str());
	assert(out.is_open());
	assert(in.is_open());

	char nextChar;
	Stack<char> charStack(1);//stack to store words
	while(in.peek() != char_traits<wchar_t>::eof())//while not end of file for linux
//	while(!in.eof()) uncomment this for windows
	{
		nextChar=in.get();//get next char.
		if(isalnum(nextChar))//if ^ is num or letter
		{
			if(charStack.isFull())
			{
				charStack.setCapacity(2*charStack.getCapacity());
			} 
			charStack.push(nextChar);
		}
		
		
		
		else//ellse it's a space or symble and word must be popped followed by nextChar.
		{
			while(!charStack.isEmpty())
			{
				out << charStack.pop();
			}
			out << nextChar;
		}
		
	}
}
///* Stack.cpp defines the dynamically allocated (array-based ) Stack operations.
// * Joel Adams, for CS 112 at Calvin College.
// * Student Name:Joshua MAguire
// * Date:3/26/2013
// */
//
////#include "Stack.h"
//
///* explicit-value constructor
// * Parameter: size, an unsigned value.
// * Precondition: size > 0.
// * Postcondition: myTop == 0 && myCapacity == size
// *              && myArray contains the address of a dynamic array of 'size' entries.
// */
//Stack::Stack(unsigned size)
//{
//	if(size>0)
//	{
//		myTop = 0;
//		myCapacity = size;
//		myArray = new Item[size];
//	}
//	else
//	{
//		throw StackException("stack(size)", "size must be positive!");
//	}
//}
//
///* copy constructor
// * Parameter: original, a Stack (const reference).
// * Postcondition: I am a copy of original.
// */
//Stack::Stack(const Stack& original) {
//	makeCopyOf(original);
//}
//
///* utility method containing code refactored from
// *  the copy constructor and operator=.
// * Parameter: original, a Stack (const reference).
// * Postcondition: I am a copy of original.
// */
//void Stack::makeCopyOf(const Stack& original) {
//	myCapacity = original.myCapacity;
//	myArray = new Item[myCapacity];
//
//	for (unsigned i = 0; i < myCapacity; i++) {
//		myArray[i] = original.myArray[i];
//	}
//	myTop = original.myTop;
//}
//
///* destructor
// * Postcondition: myCapacity == 0 && myTop == 0
// *             && myArray has been deallocated.
// */
//Stack::~Stack() {
//	delete [] myArray;
//	myArray = NULL;
//	myCapacity = 0;
//	myTop = 0;
//}
//
///* assignment operator
// * Parameter: original, a Stack (const reference).
// * Postcondition: I am a copy of original
// *              && I have been returned.
// */
//Stack& Stack::operator=(const Stack& original) {
//	if (this != &original) {
//		delete [] myArray;
//		makeCopyOf(original);
//	}
//	return *this;
//}
//
//bool Stack::isEmpty() const
//{
//	if(myTop==0){return true;}return false;//one liner! OH YEAH
//}
//bool Stack::isFull() const
//{
//	if(myCapacity==myTop){return true;}
//	return false;
//}
//void Stack::push(Item it)
//{
//	if(myTop==myCapacity)
//	{
//		throw StackException("push();","Stack is full!");
//	}else
//	{
//		myArray[myTop]=it;
//		myTop++;
//	}
//}
//Item Stack::getTop() const
//{
//	if(myTop>0)
//	{
//		return myArray[myTop-1];
//	} else
//	{
//		throw StackException("getTop()", "stack underflow");
//	}
//}
//Item Stack::pop()
//{
//	if(myTop==0)
//	{
//		throw StackException("pop()","stack underflow...Stack is empty!");
//	}else
//	{
//		myTop--;
//		return(myArray[myTop]);
//	}
//}
//unsigned Stack::getSize() const
//{
//	return(myTop);
//}
//unsigned Stack::getCapacity() const
//{
//	return(myCapacity);
//}
//void Stack::setCapacity(unsigned newCapacity)
//{
//	if(newCapacity <= myTop)
//	{
//		throw StackException("setCapacity()","newCapacity must be greater than current size(getSize()).");
//	}
//	//Item* newArray = new Item[newCapacity];
//	//for(unsigned i=0;i<myCapacity;i++)
//	//{
//	//	newArray[i]=myArray[i];
//	//}
//	//delete [] myArray;
//	//myArray = newArray;
//	//delete [] newArray;//looks deletes myArray too
//	myCapacity=newCapacity;
//}
//
//
//
//
//
//
//
/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
  * eddited by Joshua Maguire on 4/1/2013
 */

#include "StackTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

void StackTester::runTests()
{
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushAndIsFull();
	testGetTop();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testGetSize();
	testGetCapacity();
	testSetCapacity();
	

	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor()
{
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<double> s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (StackException se) {
		cout << se << flush;
	}
	cout << " 1 " << flush;
	// valid parameter
	Stack<double> s2(3);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty()
{
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<double> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<double> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}


void StackTester::testPushAndIsFull()
{
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<double> s1(1);
	s1.push(11);
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (StackException se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<double> s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (StackException se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testGetTop()
{
	cout << "- Testing getTop()... " << flush;
	// test with empty stack
	Stack<int> s1(1);
	try {
		s1.getTop();
		cerr << "\ngetTop() worked on empty stack\n";
		exit(1);
	} catch (StackException se) {
		cout << " 1 " << flush;
	}
	//	test with capacity 1
	Stack<int> s2(1);
	s2.push(11);
	assert( s2.getTop() == 11 );
	cout << " 2 " << flush;
	// test with capacity > 1
	Stack<int> s3(3);
	s3.push(11);
	assert( s3.getTop() == 11 );
	s3.push(22);
	assert( s3.getTop() == 22 );
	s3.push(33);
	assert( s3.getTop() == 33 );
	cout << " 3 " << flush;
	cout << " Passed! " << endl;
}

void StackTester::testPop()
{
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<int> s1(1);
	assert( s1.isEmpty() );
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (StackException se) {
		cout << " 1 " << flush;
	}
	// try empty, capacity > 1
	Stack<int> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (StackException se) {
		cout << " 2 " << flush;
	}
	// try non-empty, capacity 1
	Stack<int> s3(1);
	s3.push(11);
	assert( s3.getTop() == 11 );
	assert( s3.pop() == 11 );
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (StackException se) {
		cout << " 3 " << flush;
	}
	// try non-empty, capacity > 1
	Stack<int> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.getTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.getTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.getTop() == 11 );
	assert( s4.pop() == 11 );
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (StackException se) {
		cout << " 4 " << flush;
	}
	cout << " Passed!" << endl;
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<unsigned> s1(1);
	Stack<unsigned> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<unsigned> s3(1);
	s3.push(11);
	Stack<unsigned> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.getTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<unsigned> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<unsigned> s6(s5);
	assert( s6.myCapacity = s5.myCapacity );
	assert( s6.myTop == s5.myTop );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.getTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<unsigned> s1(1);
	Stack<unsigned> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<long> s3(1);
	s3.push(11);
	Stack<long> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.getTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<long> s5(1);
	Stack<long> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<long> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<long> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity = s7.myCapacity );
	assert( s8.myTop == s7.myTop );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.getTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<long> s9(2);
	Stack<long> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<long> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<long> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<long> s13(1);
	Stack<long> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
	// self-assignment, non-minimal size
	s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<double> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<double> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<double> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<double> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}
void StackTester::testGetSize()
{
	cout << "- Testing getSize().." << flush;
	Stack<double> s1(5);
	assert(s1.getSize()==0);
	s1.push(5);
	assert(s1.getSize()==1);
	s1.push(4);
	assert(s1.getSize()==2);
	s1.push(3);
	assert(s1.getSize()==3);
	s1.push(2);
	assert(s1.getSize()==4);
	s1.push(1);
	assert(s1.getSize()==5);
	cout << " Passed!" << endl;
}
void StackTester::testGetCapacity()
{
	cout << "- Testing getCapacity().." << flush;
	Stack<double> s1(1);
	assert(s1.getCapacity()==1);
	Stack<double> s2(7);
	assert(s2.getCapacity()==7);
	s2.push(3);
	s2.push(3);
	s2.push(3);
	s2.push(3);
	s2.push(3);
	s2.push(3);
	s2.push(3);
	assert(s2.getCapacity()==7);
	cout << " Passed!" << endl;
}
void StackTester::testSetCapacity()
{
		cout << "- Testing setCapacity().." << flush;
		Stack<double> s1(2);
		//new capacity from empty 
		double* preLocation=s1.myArray;//address of array before setCapacity
		s1.setCapacity(4);
		double* postLocation=s1.myArray;//address after setCapacity
		assert(preLocation!=postLocation);//asserts the array changed, aka it worked properly.
		assert(s1.getCapacity()==4);
		cout << " 1 " << flush;
		//new capacity from full
		s1.push(1);
		s1.push(2);
		s1.push(3);
		s1.push(4);
		s1.setCapacity(6);
		assert(s1.getCapacity()==6);
		assert(s1.pop()==4);
		cout << " 2 " << flush;
		//new capacity smaller than current
		try
		{
			s1.setCapacity(2);
			cerr << "\nsetCapacity() work when trying to decrease size.\n";
			exit(1);
		} catch (StackException se)
		{
			cout << " 3 " << flush;
		}
		cout << " Passed!" << endl;
}

/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 * eddited bgy Joshua Maguire on 4/1/2013
 */
 #include "Decoder.h"
#include "StackTester.h"

int main() {
	StackTester st;
	st.runTests();
	Decoder d1;
	d1.Decode("inputFile.txt","outputFile.txt");//encode
	d1.Decode("outputFile.txt","outputFile2.txt");//decode
}

/* Decoder.cpp - a class used to encode / decode text
* by Joshua Maguire for cs 112 on 4/1/2013
*/
#ifndef DECODER_H_
#define DECODER_H_

#include "Stack.h"
#include <iostream>
#include <fstream>
#include <cstdio>
#include <iostream>
#include <string>
#include <assert.h>

using namespace std;
class Decoder
{
public:
	Decoder(void);
	~Decoder(void);
	void Decode( string inFileName,string outFileName);

private:


};

#endif //DECODER_H_
/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Joshua MAguire
 * Date:3/26/2013
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <string>
#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Joshua MAguire
 * Date:3/26/2013
 * 
 * Invariant: myTop == 0 && isEmpty() && !isFull()
 *         || myTop == myCapacity && !isEmpty() && isFull()
 *         || myTop > 0 && myTop < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member myTop always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or getTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
using namespace std;

template <class Item>
class Stack {
public:
	Stack(unsigned size);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty() const;
	bool isFull() const;
	void push(Item it);
	Item getTop() const;
	Item pop();
	unsigned getSize() const;
	unsigned getCapacity() const;
	void setCapacity(unsigned newCapacity);
protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned myTop;
	Item*    myArray;
	friend class StackTester;
	friend class Decoder;
};
template <class Item>
Stack<Item>::Stack(unsigned size)
{
	if(size>0)
	{
		myTop = 0;
		myCapacity = size;
		myArray = new Item[size];
	}
	else
	{
		throw StackException("stack(size)", "size must be positive!");
	}
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template <class Item>
Stack<Item>::Stack(const Stack<Item>& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template <class Item>
void Stack<Item>::makeCopyOf(const Stack<Item>& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	myTop = original.myTop;
}

/* destructor
 * Postcondition: myCapacity == 0 && myTop == 0
 *             && myArray has been deallocated.
 */
template <class Item>
Stack<Item>::~Stack() {
	delete [] myArray;//error here
	myArray = NULL;
	myCapacity = 0;
	myTop = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template <class Item>
Stack<Item>& Stack<Item>::operator=(const Stack<Item>& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}
/* isEmpty method
 * Parameter:
 * Postcondition: returns true/false
 */
template <class Item>
bool Stack<Item>::isEmpty() const
{
	if(myTop==0){return true;}return false;//one liner! OH YEAH
}
/* isFull method.
 * returns true/false...
 */
template <class Item>
bool Stack<Item>::isFull() const
{
	if(myCapacity==myTop){return true;}
	return false;
}
/* push() method - puts new item on stack.
 * Parameter:Item it - item to be put on stack
 * Postcondition: Item it put on top of stack.
 */
template <class Item>
void Stack<Item>::push(Item it)
{
	if(myTop==myCapacity)
	{
		throw StackException("push();","Stack is full!");
	}else
	{
		myArray[myTop]=it;
		myTop++;
	}
}
/* getTop() method - returns Item from top of stack.
 * Postcondition: top Item returned...
 */
template <class Item>
Item Stack<Item>::getTop() const
{
	if(myTop>0)
	{
		return myArray[myTop-1];
	} else
	{
		throw StackException("getTop()", "stack underflow");
	}
}
/* pop() method - takes off top item from stack and returns Item.
 * Postcondition: top Item taken off stack. and returned
 */
template <class Item>
Item Stack<Item>::pop()
{
	if(myTop==0)
	{
		throw StackException("pop()","stack underflow...Stack is empty!");
	}else
	{
		myTop--;
		return(myArray[myTop]);
	}
}
/* getSize method - returns the current size of stack by returning myTop.
 * Postcondition: myTop aka current stack size returned.
 */
template <class Item>
unsigned Stack<Item>::getSize() const
{
	return(myTop);
}
/* getCapacity method - returns the max size of stack by returning myCapacity.
 * Postcondition: myCapacity aka max stack size returned.
 */
template <class Item>
unsigned Stack<Item>::getCapacity() const
{
	return(myCapacity);
}
/* setCapacity method - resized myCapacity aka the Stacks array.
 * Parameter unsigned newCapacity - size of desired new capacity.
 *precondition: myArray is small..
 * Postcondition: myArray is bigger, values if any were coppied.
 */
template <class Item>
void Stack<Item>::setCapacity(unsigned newCapacity)
{
	if(newCapacity <= myTop) 
	{
		throw StackException("setCapacity()","newCapacity must be greater than current size(getSize()).");
	}
	Item* newArray = new Item[newCapacity];
	for(unsigned i=0;i<myCapacity;i++) //fill new array with same values
	{
		newArray[i]=myArray[i];
	}
	delete [] myArray;
	myArray = newArray; //set new array to myArray
	myCapacity=newCapacity;//update capacity
}


#endif

/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
  * eddited by JOshua Maguire on 4/1/2013.
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushAndIsFull();
	void testGetTop();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testGetSize();
	void testGetCapacity();
	void testSetCapacity();
};

#endif /*STACKTESTER_H_*/

   dear sam,
   I am having a great time and wish you were here.
   my 18th birthday was last week and several of us went out for dessert.
   computer science is my favorite course!
   
   love,
   chris.   dear sam,
   I am having a great time and wish you were here.
   my 18th birthday was last week and several of us went out for dessert.
   computer science is my favorite course!
   
   love,
   chris.   raed mas,
   I ma gnivah a taerg emit dna hsiw uoy erew ereh.
   ym ht81 yadhtrib saw tsal keew dna lareves fo su tnew tuo rof tressed.
   retupmoc ecneics si ym etirovaf esruoc!
   
   evol,
   sirhc.jlm54@knuth:~/cs112/proj7$ cd Debug
jlm54@knuth:~/cs112/proj7/Debug$ ls
Decoder.d  makefile    proj7	   Stack.d  StackTester.d  subdir.mk  tester.o
Decoder.o  objects.mk  sources.mk  Stack.o  StackTester.o  tester.d
jlm54@knuth:~/cs112/proj7/Debug$ make all
make: Nothing to be done for `all'.
jlm54@knuth:~/cs112/proj7/Debug$ cd ..
jlm54@knuth:~/cs112/proj7$ ./Debug/proj7
Testing Stack class...
- Testing constructor... *** StackException in stack(size): size must be positive! 1  2  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing getTop()...  1  2  3  Passed! 
- Testing pop()...  1  2  3  4  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getSize().. Passed!
- Testing getCapacity().. Passed!
- Testing setCapacity().. 1  2  3  Passed!
All tests passed!
jlm54@knuth:~/cs112/proj7$ exit

Script done on Tue 02 Apr 2013 04:31:56 PM EDT
