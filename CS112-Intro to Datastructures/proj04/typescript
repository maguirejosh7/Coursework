Script started on Sat 02 Mar 2013 06:09:40 PM EST
adb33@church:~/AeroFS/112/proj4$ ls
Application.cpp       MatrixTest1Copy.txt  tester.cpp	     vecTest1.txt
Application.h	      MatrixTest1.txt	   typescript	     vecTest2Copy.txt
Debug		      MatrixTest2.txt	   Vec.h	     vecTest2.txt
Matrix.h	      MatrixTester.cpp	   vecStreamOut.txt  VecTester.cpp
MatrixTest1Copy2.txt  MatrixTester.h	   vecTest1Copy.txt  VecTester.h
adb33@church:~/AeroFS/112/proj4$ cat *.cpp *.h *.txt
/*
 * Application.cpp
 *
 *  Created on: Mar 2, 2013
 *  Author: Anna Brink
 *  Author: Joshua MAguire
 */

#include "Application.h"

void Application::runApplication() {
    	cout 	<< "Please choose a Matrix operation from the following list.\n"
    			<< "Enter the corresponding number: \n"
    			<< "1 - addition\n"
    			<< "2 - subtraction\n"
    			<< "3 - transpose\n"
    			<< endl;
    	unsigned choice; // input from the user
    	string garbage; // collects invalid input
    	cin >> choice;
    	while (cin.fail() || choice > 3) {
    		cin.clear();
    		getline(cin, garbage);
    		cout 	<< "Invalid input.\n"
    				<< "Please enter one of the numbers from the menu to indicate your choice: "
    				<< endl;
    		cin >> choice;
    	}
    	string fileName;
    	cout << "Please enter the name of a file containing Matrix data: " << endl;
    	cin >> fileName;
    	Matrix<int> m1, m;
    	m1.readFrom(fileName);
    	switch (choice) {
    	case 1:
    	{
    		cout << "Please enter the name of a file containing Matrix data for the second matrix: " << endl;
    		cin >> fileName;
    		Matrix<int> m2;
    		m2.readFrom(fileName);
    		m = m1 + m2;
    		m.writeTo(cout);
    	}
    	break;

    	case 2:
    	{
    		cout << "Please enter the name of a file containing Matrix data for the second matrix: " << endl;
    		cin >> fileName;
    		Matrix<int> m2;
    		m2.readFrom(fileName);
    		m = m1 - m2;
    		m.writeTo(cout);
    	}
    	break;

    	case 3:
    	{
    		m = m1.getTranspose();
    		m.writeTo(cout);
    	}
    	break;

    	}
}


/* MatrixTester.cpp defines test-methods for class Matrix<double>.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "MatrixTester.h"
#include <iostream>        // cout, cerr, ...
#include <cstdlib>         // exit()
#include <stdexcept>       // range_error, ...
using namespace std;

void MatrixTester::testDefaultConstructor() {
	cout << "Testing default constructor..." << flush;
	Matrix<double> m1;
	assert( m1.getRows() == 0 );
	assert( m1.getColumns() == 0 );
	cout << " 0 " << flush;

	Matrix<double> m2;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testExplicitConstructor() {
	cout << "Testing explicit constructor..." << flush;
	Matrix<double> m1(2, 3);
	assert( m1.getRows() == 2 );
	assert( m1.getColumns() == 3 );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1.myVec[i][j] == 0 );
		}
	}
	cout << " 1 " << flush;

	Matrix<double> m2(3, 1);
	assert( m2.getRows() == 3 );
	assert( m2.getColumns() == 1 );
	for (unsigned i = 0; i < m2.getRows(); i++) {
		for (unsigned j = 0; j < m2.getColumns(); j++) {
			assert( m2.myVec[i][j] == 0 );
		}
	}
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty Matrix<double>
	Matrix<double> m1;
	Matrix<double> m2 = Matrix<double>(m1);
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec.getSize() == 0 );
	cout << " 1 " << flush;

	// copy non-empty Matrix<double>
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3.myVec[i][j] = i+j;
		}
	}
	Matrix<double> m4 = Matrix<double>(m3);
	assert( m4.getRows() == m3.getRows() );
	assert( m4.getColumns() == m3.getColumns() );
	assert( m4.myVec.getSize() == m3.myVec.getSize() );
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			assert( m4.myVec[i][j] == i+j );
		}
	}
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

void MatrixTester::testAssignment() {
	cout << "Testing =... " << flush;
	// empty to empty
	Matrix<double> m0;
	Matrix<double> m1;
	m0 = m1;
	assert( m0.getRows() == 0 );
	assert( m0.getColumns() == 0 );
	assert( m0.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty to empty
	Matrix<double> m2(2,3);
	m0 = m2;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m2.myVec );
	cout << " 1 " << flush;

	// empty to nonempty
	m2 = m1;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec == m1.myVec );
	cout << " 2 " << flush;

	// non-empty to non-empty
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
		}
	}
	Matrix<double> m4(5, 4);
	m4 = m3;
	assert( m4.getRows() == 2 );
	assert( m4.getColumns() == 3 );
	assert( m4.myVec == m3.myVec );
	cout << " 3 " << flush;

	// chaining
	Matrix<double> m5;
	m5 = m0 = m4;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m4.myVec );
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	assert( m5.myVec == m0.myVec );
	cout << " 4 " << flush;

	// self-assignment
	m5 = m5;
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	for (unsigned i = 0; i < m5.getRows(); i++) {
		for (unsigned j = 0; j < m5.getColumns(); j++) {
			assert( m5[i][j] == i+j );
		}
	}
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testEquality() {
	cout << "Testing ==... " << flush;
	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( m1 == m2 );
	cout << " 1 " << flush;

	// same sized
	Matrix<double> m3(2, 3);
	Matrix<double> m4a(2, 3);
	Matrix<double> m4b(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4a[i][j] = i+j;
			m4b[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( m3 == m4a );
	assert( !(m1 == m3) );
	assert( !(m3 == m5) );
	m4b[1][1] = 0;
	assert( !(m3 == m4b) );
	cout << " 2 " << flush;

	// different row sizes
	Matrix<double> m6(3,3);
	Matrix<double> m7(2,3);
	assert( !(m6 == m7) );
	cout << " 3 " << flush;

	// same row sizes, different column sizes
	Matrix<double> m8(2,4);
	assert( !(m8 == m7 ) );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testReadSubscript(const Matrix<double>& mat) {
	for (unsigned i = 0; i < mat.getRows(); i++) {
		for (unsigned j = 0; j < mat.getColumns(); j++) {
			assert( i*j == mat[i][j] );
		}
	}
}

void MatrixTester::testSubscripts() {
	cout << "Testing subscripts... " << flush;
	Matrix<double> m(4, 3);
	// test write-subscript
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			m[i][j] = i*j;
		}
	}
	cout << " 1 " << flush;

	// test read-subscript -- see above
	testReadSubscript(m);
	cout << " 2 " << flush;

	// exceptions
	// empty Matrix<double>
	Matrix<double> m0;

	// read subscript
	try {
		double value = m0[0][0];
		cerr << "successfully read from empty Matrix<double>";
		exit(1);
	} catch (range_error) {
		cout << " 3 " << flush;
 	}

	// write subscript
	try {
		m0[0][0] = 0;
		cerr << "successfully wrote to empty Matrix<double>";
		exit(1);
	} catch (range_error) {
		cout << " 4 " << flush;
 	}
//
	// nonempty Matrix<double>
	Matrix<double> m2(2,3);

	// beyond last row
	try {
		m2[2][0] = 0;
		cerr << "successfully wrote past last Matrix<double> row";
		exit(1);
	} catch (range_error) {
		cout << " 5 " << flush;
 	}

	// beyond last column
	try {
		m2[0][3] = 0;
		cerr << "successfully wrote past last Matrix<double> column";
		exit(1);
	} catch (range_error) {
		cout << " 6 " << flush;
 	}

	cout << "Passed!" << endl;
}


void MatrixTester::testInequality() {
	cout << "Testing !=... " << flush;

	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( !(m1 != m2) );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m3(2, 3);
	Matrix<double> m4(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( !(m3 != m4) );
	assert( m1 != m3 );
	assert( m3 != m5 );
	cout << " 1 " << flush;

	// nonempty, different row sizes
	Matrix<double> m6(3,3);
	for (unsigned i = 0; i < m6.getRows(); i++) {
		for (unsigned j = 0; j < m6.getColumns(); j++) {
			m6[i][j] = i+j;
		}
	}
	assert( m3 != m6 );
	cout << " 2 " << flush;

	// nonempty, different column sizes
	Matrix<double> m7(2, 4);
	for (unsigned i = 0; i < m7.getRows(); i++) {
		for (unsigned j = 0; j < m7.getColumns(); j++) {
			m7[i][j] = i+j;
		}
	}
	assert( m3 != m7 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testTranspose() {
	cout << "Testing getTranspose()... " << flush;
	// empty
	Matrix<double> m0a, m0b(2,3);
	m0b = m0a.getTranspose();
	assert( m0b.getRows() == 0 );
	assert( m0b.getColumns() == 0 );
	assert( m0b.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty
	Matrix<double> m1(4, 3);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
		}
	}
	Matrix<double> m2 = m1.getTranspose();
	assert( m2.getRows() == m1.getColumns() );
	assert( m2.getColumns() == m1.getRows() );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m2[j][i] == m1[i][j] );
		}
	}
	cout << " 1a " << flush;
	// check that m1 is unchanged
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testAddition() {
	cout << "Testing +... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a + m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 + m2;
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == i*j + i+j );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 + m4;
		cerr << "operator+ worked with different row sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 + m5;
		cerr << "operator+ worked with different column	sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testSubtraction() {
	cout << "Testing -... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a - m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	//non-empty, valid
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 - m2;
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == m1[i][j] - m2[i][j] );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 - m4;
		cerr << "operator- worked with different row sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 - m5;
		cerr << "operator- worked with different column	sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

//void MatrixTester::testMultiply() {
//	cout << "Testing *..." << flush;
//	// empty
//	Matrix<double> m0a, m0b, m0c(3,2);
//	m0c = m0a * m0b;
//	assert( m0c.getRows() == 0 );
//	assert( m0c.getColumns() == 0 );
//	assert( m0c.myVec.getSize() == 0 );
//	cout << " 0 " << flush;
//
//	Matrix<double> m1(2, 3);
//	Matrix<double> m2(3, 2);
//	for (unsigned i = 0; i < m1.getRows(); i++) {
//		for (unsigned j = 0; j < m1.getColumns(); j++) {
//			m1[i][j] = i+j+1;
//			m2[j][i] = i+j+1;
//		}
//	}
//
//	Matrix<double> m3 = m1 * m2;
//	assert( m3.getRows() == 2);
//	assert( m3.getColumns() == 2 );
//	assert( m3[0][0] == 14 );
//	assert( m3[0][1] == 20 );
//	assert( m3[1][0] == 20 );
//	assert( m3[1][1] == 29 );
//	cout << " 1a " << flush;
//
//	// check that left operand did not change
//	for (unsigned i = 0; i < m1.getRows(); i++) {
//		for (unsigned j = 0; j < m1.getColumns(); j++) {
//			assert( m1[i][j] == i+j+1 );
//		}
//	}
//	cout << " 1b " << flush;
//
//	// nonempty, m1.columns != m2.rows
//	Matrix<double> m4(3,3);
//	try {
//		m3 = m2 * m4;
//		cerr << "operator* worked with bad row/column sizes";
//		exit(1);
//	} catch (invalid_argument) {
//		cout << " 2 " << flush;
//	}
//
//	cout << "Passed!" << endl;
//}

void MatrixTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;
	ifstream fin("MatrixTest1.txt");
	assert( fin.is_open() );
	unsigned rows, columns;
	fin >> rows >> columns;
	Matrix<double> m(rows, columns);
	m.readFrom(fin);
	for (unsigned i = 0; i < rows; i++) {
		for (unsigned j = 0; j < columns; j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testReadFromFile() {
	cout << "Testing readFrom(string)... " << flush;
	Matrix<double> m;
	m.readFrom("MatrixTest1.txt");
	assert( m.getRows() == 3 );
	assert( m.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;
	Matrix<double> m;
	// read a Matrix<double> whose values we know
	m.readFrom("MatrixTest1.txt");
	ofstream fout("MatrixTest1Copy.txt");
	assert( fout.is_open() );
	// now write it to a file via a stream
	fout << m.getRows() << " " << m.getColumns() << "\n";
	m.writeTo(fout);
	fout.close();
	// now, read what we just wrote into a different Matrix<double>
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy.txt");
	// and test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToFile() {
	cout << "Testing writeTo(string)... " << flush;
	Matrix<double> m;
	// read in a Matrix<double> whose values we know
	m.readFrom("MatrixTest1.txt");
	// write it to a file
	m.writeTo("MatrixTest1Copy2.txt");
	// now, read what we just wrote into a different Matrix<double>
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy2.txt");
	// test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}


void MatrixTester::runTests() {
	cout << "Running Matrix tests..." << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testSubscripts();
	testInequality();
	testTranspose();
	testAddition();
	testSubtraction();
//	testMultiply();
	testReadFromStream();
	testWriteToStream();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

/* tester.cpp drives the testing of our Vec template and Matrix class.
 * Student: Anna Brink, Joshua Maguire
 * Date: 02/26/13
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "MatrixTester.h"
#include "Application.h"
// #include "MatrixTester.h"

int main() {
//	VecTester vt;
//	vt.runTests();
	MatrixTester mt;
	mt.runTests();
	Application app;
	app.runApplication();
}
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name: Anna Brink
 * Date: 02/26/13
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testSetSize();
	testGetSize();
	testSetItem();
	testGetItem();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec<double> v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec<double> v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec<double> v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec<double> v1;
	Vec<double> v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec<double> v3(5);
	Vec<double> v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec<double> v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec<double> v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec<double> v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec<double> v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec<double> v1;
	Vec<double> v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec<double> v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec<double> v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec<double>  v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec<double>  v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec<double>  v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec<double>  v8;
	Vec<double>  v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec<double>  v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;
	// non-empty, increasing
	Vec<double>  v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	cout << " 1 " << flush;
	// non-empty, decreasing
	Vec<double>  v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	cout << " 2 " << flush;
	// non-empty, equal
	Vec<double>  v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec<double>  v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec<double>  v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec<double>  v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec<double>  v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec<double>  v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec<double>  v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec<double>  v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec<double>  v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec<double>  v1;
	Vec<double>  v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;
	// nonempty, same size, default values
	Vec<double>  v3(5);
	Vec<double>  v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;
	// nonempty, same size, set values
	Vec<double>  v5(5);
	Vec<double>  v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;
	// empty vs nonempty
	Vec<double>  v7;
	Vec<double>  v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;
	// nonempty, same size, first value different
	Vec<double>  v9(5);
	Vec<double>  v10(5);
	Vec<double>  v11(5);
	Vec<double>  v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;
	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;
	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec<double> v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
      // write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
      fout.close();
      // now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
      // an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      // get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec<double> v(size);
      // test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
      fin.close();
      cout << "Passed!" << endl;
}


void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;

	// empty
	Vec<double>  v0;
	Vec<double>  v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;

	// empty vs nonempty
	Vec<double>  v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;

	// equal sized, same values
	Vec<double>  v3(3);
	Vec<double>  v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;

	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	// equal sized, same except first
	for (unsigned i = 0; i < 3; i++) {
		v3.myArray[i] = i+1;
	}
	v3.myArray[0] = 0;
	assert( v3 != v4 );
	cout << " 4 " << flush;

	// equal sized, same except middle
	v3.myArray[0] = 1;
	v3.myArray[1] = 0;
	assert( v3 != v4 );
	cout << " 5 " << flush;

	// equal sized, same except last
	v3.myArray[1] = 2;
 	v3.myArray[2] = 0;
	assert( v3 != v4 );
	cout << " 6 " << flush;

	// equal sized, equal
	v3.myArray[2] = 3;
	assert( !(v3 != v4) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec<double>  v1(3);
	Vec<double>  v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec<double>  v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// empty
	Vec<double>  v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 2 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 3 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec<double>  v1(3);
	Vec<double>  v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec<double>  v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// empty
	Vec<double>  v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 2 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 3 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec<double>  v1(3);
	Vec<double>  v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// empty
	Vec<double>  v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 2 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument) {
		cout << " 3 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
      cout << "Testing readFrom()... " << flush;
      Vec<double> v1;
      v1.readFrom("vecTest1.txt");
      assert( v1.getSize() == 3 );
      assert( v1.myArray != NULL );
      assert( v1.getItem(0) == 1 );
      assert( v1.getItem(1) == 2 );
      assert( v1.getItem(2) == 3 );
      cout << " 1 " << flush;

      Vec<double> v2(5);
      double* oldAddr = v2.myArray;
      v2.readFrom("vecTest2.txt");
      assert( v2.getSize() == 4 );
      cout << " 2 " << flush;
      assert( v2.myArray != NULL );
      assert( v2.getItem(0) == 2 );
      assert( v2.getItem(1) == 4 );
      assert( v2.getItem(2) == 6 );
      assert( v2.getItem(3) == 8 );
       /* the following assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
        *  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
     // assert( v2.myArray != oldAddr );
      cout << " 3 " << flush;
      cout << "Passed! Make sure your method closed the file..." << endl;
}

void VecTester::testWriteToFile() const {
      cout << "Testing writeTo()... " << flush;
      // read a vector we know into an empty Vec...
      Vec<double> v1;
      v1.readFrom("vecTest1.txt");
      // make a copy of it in a different file
      v1.writeTo("vecTest1Copy.txt");
      cout << " 1 " << flush;
      cout << "vecTest1Copy.txt created " << flush;
      // read in the copy, and check it
      Vec<double> v3;
      v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

      // read a vector we know into a nonempty Vec...
      Vec<double> v2(5);
      v2.readFrom("vecTest2.txt");
      // make a copy of it in a different file
      v2.writeTo("vecTest2Copy.txt");
      cout << " 3 " << flush;
      cout << "vecTest2Copy.txt created " << flush;
      // read in the copy and check it
      v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
      cout << "Passed!  Make sure you closed the file..." <<
      endl;
}

/*
 * Application.h
 *
 *  Created on: Mar 2, 2013
 *      Author: Anna Brink
 *      Author: Joshua MAguire
 */

#include "Matrix.h"
#include <iostream>
using namespace std;

class Application {
public:
	// runs the Application
	void runApplication();
};


/* Matrix.h provides a class for manipulating 2-dimensional vectors.
 * Student Name: Anna Brink, Joshua Maguire
 * Date: February 26, 2013
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#ifndef MATRIX_H_
#define MATRIX_H_

#include "Vec.h"
#include <fstream>
#include <iostream>
using namespace std;

template <class Item>

class Matrix {
public:

	/** Default Constructor
	 */
	Matrix();

	/** Explicit Constructor
	 */
	Matrix(unsigned rows, unsigned columns);

	/** Read Subscript.
	 * \param index The position of the row.
	 * \return A vector of items which represents the row.
	 */
	const Vec<Item> & operator[](unsigned index) const;

	/** Write Subscript.
	 * \param index The position of the row that will be written over.
	 * \return A vector of items which represents the row.
	 */
	Vec<Item> & operator[](unsigned index);

	/** Equality.
	 * \param m2 The matrix compared to the one the function is called on.
	 * \return True if the matrices are equal and false if not.
	 */
	bool operator==(const Matrix<Item>& m2) const;

	/*This operator method compares
	 * matrixs m1 and myVec to see if they
	 *  not equal each other.
	 * returns a bool...
	 *
	 * @param Matrix& m1
	 *
	 * precondition: Matrix& \m1 is a valid matrix, could be null...
	 * postcondition: returns bool false if they are equal
	 *
	 *made by Joshua Maguire
	 */
	bool operator!=(const Matrix<Item>& m1) const;


	istream& readFrom(istream& in);

	/** Writes the matrix out to an ostream.
	 * \param out The stream to write the matrix to.
	 * \return The stream entered to enable chaining of operator<<()
	 * \author Anna Brink
	 */
	ostream& writeTo(ostream& out);

	/** Fills the matrix with information from a file
	 * \param fileName The name of the file with matrix information.
	 * \author Anna Brink
	 */
	void readFrom(string fileName);

	/*This method writes contents of myVec to the file filename.
	 *
	 * @param string fileName
	 *
	 * precondition: fileNAme is name of valid txt filename
	 * postcondition: contents of fileName written to txt.
	 *
	 * made by Joshua Maguire
	 */
	void writeTo(string fileName) const;

	/*This method returns my matrix + the second matrix.
	 *
	 *
	 * @param Matrix& m2
	 *
	 * precondition: Matrix& m2 is a valid matrix, could be empty
	 * postcondition: returns m2 + myVec
	 *
	 * made by Joshua Maguire
	 */
	Matrix<Item> operator+(const Matrix<Item>& m2) ;

	/** Subtracts a second matrix from the matrix.
	 * \param m2 The matrix subtracted from the matrix the function is called upon.
	 * \return A matrix containing the difference of the two matrices.
	 * \author Anna Brink
	 */
	Matrix<Item> operator-(const Matrix<Item>& m2) const;

	/** Creates a matrix whose columns are the rows of the matrix the function is called
	 * upon and whose rows are the columns of the matrix the function is called upon.
	 * \return The matrix created.
	 * \author Anna Brink
	 */
	Matrix<Item> getTranspose() const;

	/** Accessor methods
	 */
	unsigned getRows() const;
	unsigned getColumns() const;

private:
	unsigned			myRows;
	unsigned			myColumns;
	Vec< Vec<Item> >	myVec;

	friend class MatrixTester;
};
template <class Item>
Matrix<Item>::Matrix() {
	myRows = myColumns = 0;
}
template <class Item>
Matrix<Item>::Matrix(unsigned rows, unsigned columns) {
	myRows = rows;
	myColumns = columns;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(columns);
	}
}
template <class Item>
const Vec<Item> & Matrix<Item>::operator[](unsigned index) const {
	if (index >= myRows) {
		throw range_error("Vec subscript: index too large.");
	}
	return myVec[index];
}
template <class Item>
Vec<Item> & Matrix<Item>::operator[](unsigned index) {
	if (index >= myRows) {
		throw range_error("Vec subscript: index too large.");
	}
	return myVec[index];
}
template <class Item>
bool Matrix<Item>::operator==(const Matrix<Item>& m2) const {
	if (myRows != m2.getRows() || myColumns != m2.getColumns() ) {
		return false;
	}
	else {
		return myVec == m2.myVec;
	}
}
template <class Item>
unsigned Matrix<Item>::getRows() const {
	return myRows;
}
template <class Item>
unsigned Matrix<Item>::getColumns() const {
	return myColumns;
}
template <class Item>
bool Matrix<Item>::operator!=(const Matrix<Item>& m1) const{
    if(myRows!=m1.getRows()||myColumns!=m1.getColumns()){
        return true;
    }
    else{
        for (unsigned i = 0; i < myRows; i++) {
            for (unsigned j = 0; j < myColumns; j++) {
                if(m1[i][j] != myVec[i][j]){
                    return true;
                }
            }
            return false;
        }
    }
}
template <class Item>
istream& Matrix<Item>::readFrom(istream& in) {
	for (unsigned i = 0; i < myRows; i++) {
			for (unsigned j = 0; j < myColumns; j++) {
				in >> myVec[i][j];
			}
	}
	return in;
}
template <class Item>
ostream& Matrix<Item>::writeTo(ostream& out) {
	for (unsigned i = 0; i < myRows; i++) {
			for (unsigned j = 0; j < myColumns; j++) {
				out << myVec[i][j] << "\t";
			}
		out << endl;
	}
	return out;
}
template <class Item>
void Matrix<Item>::readFrom(string fileName) {
	unsigned rows;
	unsigned columns;
	ifstream fin(fileName.c_str());
	assert( fin.is_open() );
	fin >> rows >> columns;
	myRows = rows;
	myColumns = columns;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(columns);
		for (unsigned j = 0; j < columns; j++) {
			fin >> myVec[i][j];
		}
	}
	fin.close();
}
template <class Item>
void Matrix<Item>::writeTo(string fileName) const {
    ofstream out (fileName.c_str());
    assert( out.is_open());
    out << myRows << " " << myColumns << endl;
    for(unsigned i=0;i<myRows;i++){
        for(unsigned j=0;j<myColumns;j++){
            out << myVec[i][j] << "\t";
        }
        out << "\n";
    }
}
template <class Item>
Matrix<Item> Matrix<Item>::operator+(const Matrix<Item>& m2) {
	if (myRows != m2.getRows() || myColumns != m2.getColumns()) {
		throw invalid_argument("Matrix operator-(): The matrices are not the same size");
	}
        Matrix returnMatrix(myRows,myColumns);
        for(unsigned i=0;i<myRows;i++){
            for(unsigned j=0;j<myColumns;j++){
                returnMatrix[i][j]=myVec[i][j] + m2[i][j];
            }
        }
        return returnMatrix;

}
template <class Item>
Matrix<Item> Matrix<Item>::operator-(const Matrix<Item>& m2) const {
	if (myRows != m2.getRows() || myColumns != m2.getColumns()) {
		throw invalid_argument("Matrix operator-(): The matrices are not the same size");
	}
	Matrix m(myRows, myColumns);
	for (unsigned i = 0; i < myRows; i++) {
		for (unsigned j = 0; j < myColumns; j++) {
			m[i][j] = myVec[i][j] - m2[i][j];
		}
	}
	return m;
}
template <class Item>
Matrix<Item> Matrix<Item>::getTranspose() const {
	unsigned rows = myRows;
	unsigned columns = myColumns;
	Matrix m(columns, rows);
	for (unsigned i = 0; i < rows; i++) {
		for (unsigned j = 0; j < columns; j++) {
			m[j][i] = myVec[i][j];
		}
	}
	return m;
}

#endif
/* MatrixTester.h declares test-methods for class Matrix.
 * Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef MATRIXTESTER_H_
#define MATRIXTESTER_H_

#include "Matrix.h"

class MatrixTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testExplicitConstructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testInequality();
	void testSubscripts();
	void testReadSubscript(const Matrix<double>& mat);
	void testTranspose();
	void testAddition();
	void testSubtraction();
	void testMultiply();
	void testReadFromStream();
	void testReadFromFile();
	void testWriteToStream();
	void testWriteToFile();
};

#endif /*MATRIXTESTER_H_*/
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Anna Brink
 * Date: February 26, 2013
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
#include <fstream>
#include <stdexcept>
#include <cassert>
#include <string>
using namespace std;

template <class Item>

class Vec {
public:
	/** Initializes the size to zero and the array to NULL
	 * \author Anna Brink
	 */
	Vec();

	/** Initializes a vec of the specified size.
	 * \param size The size of the vec.
	 * \author Anna Brink
	 */
	Vec(unsigned size);

	/** Copies a vector.
	 * \param original Vector that is copied.
	 * \author Anna Brink
	 */
	Vec(const Vec<Item>& original);

	virtual ~Vec();

	/** Copies the other vector.
	 * \param original Vector that is copied.
	 * \return a reference to this vec.
	 * \author Anna Brink
	 */
	Vec& operator=(const Vec<Item>& original);

	/** Sets the size of the vector.
	 * \param newSize The size which will be set for the vector.
	 * \author Anna Brink
	 */
	void setSize(unsigned newSize);

	/** Gets the size of the vector.
	 * \return The size of the vector.
	 * \author Anna Brink
	 */
	unsigned getSize() const;

	/** Sets the value of a particular item.
	 * \param index The index (from 0 through size-1) of the item to change.
	 * \param it The item that will be stored at index.
	 * \author Anna Brink
	 */
	void setItem(unsigned index, const Item& it);

	/** Gets the value of a particular item.
	 * \param index The index (from 0 through size-1) of the item to get.
	 * \return The item.
	 * \author Anna Brink
	 */
	Item getItem(unsigned index) const;


	/** Determines if the two vectors are equal.
	 * \param v2 The vector compared to the vector the function is called on.
	 * \return true if the vectors are equal and false otherwise.
	 * \author Anna Brink
	 */
	bool operator==(const Vec<Item>& v2) const;

	/** Writes the vector one element at a time to an ostream.
	 * \param  out The ostream which the elements are written to.
	 * \author Anna Brink
	 */
	void writeTo(ostream& out) const;

	/** Reads values from an istream and assigns them to the vector.
	 * \param in The stream used to input the values.
	 * \author Anna Brink
	 */
	void readFrom(istream& in);

	/** Retrieves the value at the indicated index from the Vec
	 * \param index The index of the item to retrieve.
	 * \return The item at the index.
	 * \author Anna Brink
	 */
	const Item & operator[](unsigned index) const;

	/** Sets the value at the indicated index to the assigned item.
	 * \param index The index where the Item is set.
	 * \author Anna Brink
	 */
	Item & operator[](unsigned index);

	/** Determines if the vectors are not equal.
	 * \param v2 The vector compared to the vector the function is called on.
	 * \return true if the vectors are not equal and false otherwise.
	 * \author Anna Brink
	 */
	bool operator!=(const Vec<Item>& v2) const;

	/** Fills the vector the function is called on with the values in the file
	 * \param fileName The name of the file which contains an integer determining the size and values to store in the vector.
	 * \author Anna Brink
	 */
	void readFrom(const string& fileName);

	/** Writes the vector out to the file one element at a time after printing its size.
	 * \param fileName The name of the file which will have the size followed by the elements each on a new line.
	 * \author Anna Brink
	 */
	void writeTo(const string& fileName);

	/** Adds two vectors together by adding corresponding elements.
	 * \param v2 The vector added to the vector the function is called on.
	 * \return The Vec containing elements which are the sums of corresponding
	 * 			elements in v2 and the vector the function is called on.
	 * \author Anna Brink
	 */
	Vec<Item> operator+(const Vec<Item>& v2) const;

	/** Subtracts a vector from the vector the function is called upon
	 * \param v2 The vector subtracted from the vector the function is called upon.
	 * \return The resulting vector
	 * \author Anna Brink
	 */
	Vec<Item> operator-(const Vec<Item>& v2) const;

	/** Finds the dot product of the vector the function is called on and the vector passed.
	 * \param v2 The vector passed to the function.
	 * \return The dot product.
	 * \author Anna Brink
	 */
	double operator*(const Vec& v2) const;

private:
	unsigned mySize;
	Item * myArray;

	friend class VecTester;
};

template <class Item>
Vec<Item>::Vec() {
	mySize = 0;
	myArray = NULL;
}

template <class Item>
Vec<Item>::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[mySize] ();
}

template <class Item>
Vec<Item>::Vec(const Vec<Item>& original) {
	mySize = original.mySize;
	if( mySize > 0) {
		myArray = new Item[mySize];
		for (unsigned i = 0; i < mySize; i++) {
			*(myArray + i) = *(original.myArray + i);
		}
	}
	else {
		myArray = NULL;
	}
}

template <class Item>
Vec<Item>::~Vec() {
	delete [] myArray;
	mySize = 0;
	myArray = NULL;
}

template <class Item>
Vec<Item>& Vec<Item>::operator=(const Vec<Item>& original) {

	if (this != &original) {
		if (mySize != original.mySize) {
			if (mySize >= 0) {
				delete [] myArray;
				myArray = NULL;
			}
			if (original.mySize > 0) {
				myArray = new Item[original.mySize];
			}
			mySize = original.mySize;
		}
		for (unsigned i = 0; i < mySize; i++) {
			myArray[i] = original.myArray[i];
		}

	}
	return *this;

}

template <class Item>
void Vec<Item>::setSize(unsigned newSize) {
	if (mySize != newSize) {
		if (newSize == 0) {
			delete [] myArray;
			myArray = NULL;
		}
		else {
			Item * newArray = new Item[newSize];

			if (mySize < newSize) {
				for (unsigned i = 0; i < mySize; i++) {
					newArray[i] = myArray[i];
				}
				for (unsigned i = mySize; i < newSize; i++) {
					newArray[i] = 0;
				}
			}
			else {
				for (unsigned i = 0; i < newSize; i++) {
					newArray[i] = myArray[i];
				}
			}

			delete [] myArray;
			myArray = newArray;
		}
		mySize = newSize;
	}
}


template <class Item>
unsigned Vec<Item>::getSize() const {
	return mySize;
}

template <class Item>
void Vec<Item>::setItem(unsigned index, const Item& it) {
	if (myArray == NULL) {
		throw range_error("This vector was null.");
	}
	else {
		if (mySize <= index) {
			throw range_error("This index is beyond the end of Vec.");
		}
		else {
			myArray[index] = it;
		}
	}
}

template <class Item>
Item Vec<Item>::getItem(unsigned index) const {
	if (myArray == NULL) {
		throw range_error("This vector was null.");
	}
	else {
		if (mySize <= index) {
			throw range_error("This index is beyond the end of Vec.");
		}
		else {
			return myArray[index];
		}
	}
}

template <class Item>
bool Vec<Item>::operator==(const Vec<Item>& v2) const {
	if (mySize != v2.getSize()) {
		return false;
	}
	else {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.getItem(i)) {
				return false;
			}
		}
		return true;
	}
}

template <class Item>
void Vec<Item>::writeTo(ostream& out) const {
	for (unsigned i = 0; i < mySize; i++) {
		out << myArray[i] << endl;
	}
}

template <class Item>
void Vec<Item>::readFrom(istream& in) {
	for (unsigned i = 0; i < mySize; i++) {
		in >> myArray[i];
	}
}

template <class Item>
const Item & Vec<Item>::operator[](unsigned index) const {
	if (index >= mySize) {
		throw range_error("Vec subscript: index too large.");
	}
	return myArray[index];
}

template <class Item>
Item & Vec<Item>::operator[](unsigned index) {
	if (index >= mySize) {
		throw range_error("Vec subscript: index too large.");
	}
	return myArray[index];
}

template <class Item>
bool Vec<Item>::operator!=(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		return true;
	}
	else {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
		return false;
	}
}

template <class Item>
void Vec<Item>::readFrom(const string& fileName) {
	unsigned size;
	ifstream fin(fileName.c_str());
	assert(fin.is_open());
	fin >> size;
	if (mySize != size) {
		delete [] myArray;
		mySize = size;
		if (mySize == 0) {
			myArray = NULL;
		}
		else {
			myArray = new Item[size];
		}
	}
	for (unsigned i = 0; i < mySize; i++) {
		fin >> myArray[i];
	}
	fin.close();
}

template <class Item>
void Vec<Item>::writeTo(const string& fileName) {
	ofstream fout(fileName.c_str());
	assert(fout.is_open());
	fout << mySize << endl;
	for (unsigned i = 0; i < mySize; i++) {
		fout << myArray[i] << endl;
	}
	fout.close();
}

template <class Item>
Vec<Item> Vec<Item>::operator+(const Vec<Item>& v2) const {
	Vec<Item> v;
	if (mySize != v2.mySize) {
		throw invalid_argument("Vec operator+: the Vecs were not the same size.");
	}
	if (mySize != 0) {
		v.setSize(mySize);
		for (unsigned i = 0; i < mySize; i++) {
			v[i] = myArray[i] + v2.myArray[i];
		}
	}
	return v;
}

template <class Item>
Vec<Item> Vec<Item>::operator-(const Vec<Item>& v2) const {
	Vec<Item> v;
	if (mySize != v2.mySize) {
		throw invalid_argument("Vec operator-: The Vecs were not the same size.");
	}
	if (mySize != 0) {
		v.setSize(mySize);
		for (unsigned i = 0; i < mySize; i++) {
			v[i] = myArray[i] - v2.myArray[i];
		}
	}

	return v;
}

template <class Item>
double Vec<Item>::operator*(const Vec<Item>& v2) const {
	double sum = 0;
	if (mySize != v2.mySize) {
		throw invalid_argument("Vec operator-: The Vecs were not the same size.");
	}
	if (mySize != 0) {
		for (unsigned i = 0; i < mySize; i++) {
			sum += myArray[i] * v2.myArray[i];
		}
	}
	return sum;
}

#endif /*VEC_H_*/
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Anna Brink
 * Date: 2013-02-25
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;

	/** Tests the reading and writing of the subscript operator.
	 */
	void testSubscript() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
};

#endif /*VECTESTER_H_*/
3 4
1	2	3	4	
5	6	7	8	
9	10	11	12	
3 4
1	2	3	4	
5	6	7	8	
9	10	11	12	
3 4
1 2 3 4
5 6 7 8
9 10 11 123 4
0 1 2 3
4 5 6 7
8 9 10 115
10
11
12
13
14
3
1
2
3
3
1
2
3

4
2
4
6
8
4
2
4
6
8

adb33@church:~/AeroFS/112/proj4$ cat *.h *t[K.txt [K[K[K[K[K[K[K[K[K[K[K[K[K[Kcs Debug
The program 'cs' is currently not installed.  To run 'cs' please ask your administrator to install the package 'csound'
adb33@church:~/AeroFS/112/proj4$ cd Debug
adb33@church:~/AeroFS/112/proj4/Debug$ ls
Application.d  MatrixTester.d  proj4	   tester.d	VecTester.o
Application.o  MatrixTester.o  sources.mk  tester.o
makefile       objects.mk      subdir.mk   VecTester.d
adb33@church:~/AeroFS/112/proj4/Debug$ make A[Kall
make: Nothing to be done for `all'.
adb33@church:~/AeroFS/112/proj4/Debug$ cd ..
adb33@church:~/AeroFS/112/proj4$ ./Debug/proj4
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!
Please choose a Matrix operation from the following list.
Enter the corresponding number: 
1 - addition
2 - subtraction
3 - transpose

terh
Invalid input.
Please enter one of the numbers from the menu to indicate your choice: 
12
Invalid input.
Please enter one of the numbers from the menu to indicate your choice: 
1
Please enter the name of a file containing Matrix data: 
MatrixTest1.txt
Please enter the name of a file containing Matrix data for the second matrix: 
MatrixTest2.txt
1	3	5	7	
9	11	13	15	
17	19	21	23	
adb33@church:~/AeroFS/112/proj4$ ./Debug/proj4
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!
Please choose a Matrix operation from the following list.
Enter the corresponding number: 
1 - addition
2 - subtraction
3 - transpose

2
Please enter the name of a file containing Matrix data: 
MatrixTest1.txt
Please enter the name of a file containing Matrix data for the second matrix: 
MatrixTest2.txt
1	1	1	1	
1	1	1	1	
1	1	1	1	
adb33@church:~/AeroFS/112/proj4$ ./Debug/proj4
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!
Please choose a Matrix operation from the following list.
Enter the corresponding number: 
1 - addition
2 - subtraction
3 - transpose

3
Please enter the name of a file containing Matrix data: 
MatrixTest2 1.txt
1	5	9	
2	6	10	
3	7	11	
4	8	12	
adb33@church:~/AeroFS/112/proj4$ exit

Script done on Sat 02 Mar 2013 06:12:22 PM EST
