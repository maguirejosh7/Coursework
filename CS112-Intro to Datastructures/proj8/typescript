Script started on Tue 16 Apr 2013 01:55:26 PM EDT
jlm54@torvalds:~/cs112/proj8$ ls
ArrayQueue.h	      LinkedQueueTester.cpp  QueueException.h
ArrayQueueTester.cpp  LinkedQueueTester.h    somepalindromes.txt
ArrayQueueTester.h    Palindrome.cpp	     StackException.h
Debug		      Palindrome.h	     Stack.h
Exception.h	      PalindromeResults.txt  tester.cpp
LinkedQueue.cpp       PalindromeTester.cpp   typescript
LinkedQueue.h	      PalindromeTester.h
jlm54@torvalds:~/cs112/proj8$ cat *.cpp *.h *.txt
/* QueueTester.cpp defines the test-methods for class Queue.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayQueueTester.h"
#include <iostream>
#include <cassert>
#include <stdlib.h>
using namespace std;

void ArrayQueueTester::runTests() {
	cout << "Testing class ArrayQueue..." << endl;
	testConstructor();
	testAppend();
	testRemove();
	testCopyConstructor();
	testAssignment();
	testSetCapacity();
	cout << "All tests passed!\n" << endl;
}

void ArrayQueueTester::testAssignment() {
	cout << "- testing assignment... " << flush;
	// empty, smaller-to-bigger;
	ArrayQueue <int> q1(4);
	ArrayQueue <int> q2(3);
	q1 = q2;
	assert( q1.isEmpty() );
	assert( q1.myCapacity == 3 );
	assert( q1.getSize() == 0 );
	assert( q1.myFirst == q2.myFirst );
	assert( q1.myLast == q2.myLast );
	assert( q1.myArray != q2.myArray );
	cout << " 1 " << flush;
	//empty, bigger to smaller
	ArrayQueue <int> q3(3);
	ArrayQueue <int> q4(4);
	q3 = q4;
	assert( q3.isEmpty() );
	assert( q3.myCapacity == 4 );
	assert( q3.getSize() == 0 );
	assert( q3.myFirst == q4.myFirst );
	assert( q3.myLast == q4.myLast );
	assert( q3.myArray != q4.myArray );
	cout << " 2 " << flush;
	// full, same-sized
	ArrayQueue <int> q5(4);
	q5.append(11);
	q5.append(22);
	q5.append(33);
	q5.append(44);
	ArrayQueue <int> q6(4);
	q6 = q5;
	assert( q6.isFull() );
	assert( !q6.isEmpty() );
	assert( q6.myCapacity == 4 );
	assert( q6.getSize() == 4 );
	assert( q6.myFirst == q5.myFirst );
	assert( q6.myLast == q5.myLast );
	for (unsigned i = 0; i < q6.myCapacity; i++) {
		assert( q6.myArray[i] == q5.myArray[i] );
	}
	assert( q6.myArray != q5.myArray );
	cout << " 3 " << flush;
	// full, smaller-to-larger
	ArrayQueue <int> q7(3);
	q7 = q5;
	assert( q7.isFull() );
	assert( !q7.isEmpty() );
	assert( q7.myCapacity == 4 );
	assert( q7.getSize() == 4 );
	assert( q7.myFirst == q5.myFirst );
	assert( q7.myLast == q5.myLast );
	for (unsigned i = 0; i < q7.myCapacity; i++) {
		assert( q7.myArray[i] == q5.myArray[i] );
	}
	assert( q7.myArray != q5.myArray );
	cout << " 4 " << flush;
	// full, larger-to-smaller
	ArrayQueue <int> q8(5);
	q8 = q5;
	assert( q8.isFull() );
	assert( !q8.isEmpty() );
	assert( q8.myCapacity == 4 );
	assert( q8.getSize() == 4 );
	assert( q8.myFirst == q5.myFirst );
	assert( q8.myLast == q5.myLast );
	for (unsigned i = 0; i < q8.myCapacity; i++) {
		assert( q8.myArray[i] == q5.myArray[i] );
	}
	assert( q8.myArray != q5.myArray );
	cout << " 5 " << flush;
	// self assignment
	q5 = q5;
	assert( q5.isFull() );
	assert( !q5.isEmpty() );
	assert( q5.myCapacity == 4 );
	assert( q5.getSize() == 4 );
	assert( q5.myArray[0] == 11 );
	assert( q5.myArray[1] == 22 );
	assert( q5.myArray[2] == 33 );
	assert( q5.myArray[3] == 44 );
	cout << " 6 " << flush;
	// chaining
	q1 = q3 = q5;
	assert( q1.isFull() );
	assert( !q1.isEmpty() );
	assert( q1.myCapacity == 4 );
	assert( q1.getSize() == 4 );
	assert( q1.myArray[0] == 11 );
	assert( q1.myArray[1] == 22 );
	assert( q1.myArray[2] == 33 );
	assert( q1.myArray[3] == 44 );
	assert( q1.myArray != q3.myArray );
	assert( q1.myArray != q5.myArray );
	assert( q3.myArray != q5.myArray );
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void ArrayQueueTester::testCopyConstructor() {
	cout << "- testing copy constructor... " << flush;
	// empty queue
	ArrayQueue <double> q1(4);
	ArrayQueue <double> q2(q1);
	assert( q2.isEmpty() );
	assert( !q2.isFull() );
	assert( q2.myCapacity == q1.myCapacity);
	assert( q2.myFirst == q1.myFirst );
	assert( q2.myLast == q1.myLast );
	assert( q2.myArray != q1.myArray );
	cout << " 1 " << flush;
	// queue of 1 item
	ArrayQueue <double> q3(4);
	q3.append(11);
	ArrayQueue <double> q4(q3);
	assert( !q4.isFull() );
	assert( !q4.isEmpty() );
	assert( q4.myCapacity == q3.myCapacity);
	assert( q4.myFirst == q3.myFirst );
	assert( q4.myLast == q3.myLast );
	assert( q4.myArray != q3.myArray );
	assert( q4.getFirst() == 11 );
	assert( q4.getLast() == 11 );
	assert( q4.myArray != q3.myArray );
 	cout << " 2 " << flush;
 	// full queue
 	q3.append(22);
 	q3.append(33);
 	q3.append(44);
 	ArrayQueue <double> q5(q3);
	assert( q5.isFull() );
	assert( !q5.isEmpty() );
	assert( q5.myCapacity == q3.myCapacity);
	assert( q5.myFirst == q3.myFirst );
	assert( q5.myLast == q3.myLast );
	assert( q5.myArray != q3.myArray );
 	assert( q5.getFirst() == 11 );
	assert( q5.getLast() == 44 );
	assert( q5.myArray != q3.myArray );
 	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void ArrayQueueTester::testRemove() {
	cout << "- testing remove()... " << flush;
	ArrayQueue <unsigned> q1(4);
	cout << " 0 " << flush;
	// check with empty queue
	try {
		q1.remove();
		cerr << "\nremove() worked on empty Queue - 1\n";
		exit(1);
	} catch (EmptyQueueException eqe) {
		cout << " 1 " << flush;
	}
	// check with 1 item
	q1.append(1);
	assert( !q1.isEmpty() );
	assert( q1.remove() == 1 );
	assert( q1.isEmpty() );
	cout << " 2 " << flush;
	// check with 2 items
	q1.append(11);
	q1.append(22);
	assert( !q1.isEmpty() );
	assert( q1.getFirst() == 11 );
	assert( q1.getLast() == 22 );
	assert( q1.remove() == 11 );
	assert( q1.getFirst() == 22 );
	assert( q1.getLast() == 22 );
	assert( q1.remove() == 22 );
	assert( q1.isEmpty() );
	cout << " 3 " << flush;
	// load it up
	q1.append(111);
	q1.append(222);
	q1.append(333);
	q1.append(444);
	assert( q1.isFull() );
	assert( !q1.isEmpty() );
	assert( q1.getFirst() == 111 );
	assert( q1.getLast() == 444 );
	// start removing items
	assert( q1.remove() == 111 );
	assert( !q1.isFull() );
	assert( !q1.isEmpty() );
	assert( q1.getFirst() == 222 );
	assert( q1.getLast() == 444 );
    cout << " 4a " << flush;
	assert( q1.remove() == 222 );
	assert( !q1.isFull() );
	assert( !q1.isEmpty() );
	assert( q1.getFirst() == 333 );
	assert( q1.getLast() == 444 );
    cout << " 4b " << flush;
	assert( q1.remove() == 333 );
	assert( !q1.isFull() );
	assert( !q1.isEmpty() );
	assert( q1.getFirst() == 444 );
	assert( q1.getLast() == 444 );
    cout << " 4c " << flush;
	assert( q1.remove() == 444 );
	assert( !q1.isFull() );
	assert( q1.isEmpty() );
    cout << " 4d " << flush;
	// recheck empty queue
	try {
		q1.remove();
		cerr << "\nremove() worked on empty Queue - 2\n";
		exit(1);
	} catch (EmptyQueueException eqe) {
		cout << " 5 " << flush;
	}
	cout << "Passed!" << endl;
}

void ArrayQueueTester::testAppend() {
	cout << "- testing append(), getFirst(), getLast() ... " << flush;
	ArrayQueue <long> q1(4);
	assert( q1.isEmpty() );
	assert( !q1.isFull() );
	try {
		q1.getFirst();
		cerr << "\ngetFirst() worked on empty queue\n";
		exit(1);
	} catch (EmptyQueueException eqe) {
		cout << " 0a " << flush;
	}
	try {
		q1.getLast();
		cerr << "\ngetLast() worked on empty queue\n";
		exit(1);
	} catch (EmptyQueueException eqe) {
		cout << " 0b " << flush;
	}
	q1.append(11);
	assert( !q1.isEmpty() );
	assert( !q1.isFull() );
	assert( q1.getFirst() == 11 );
	assert( q1.getLast() == 11 );
	cout << " 1 " << flush;
	q1.append(22);
	assert( !q1.isEmpty() );
	assert( !q1.isFull() );
	assert( q1.getFirst() == 11 );
	assert( q1.getLast() == 22 );
	cout << " 2 " << flush;
	q1.append(33);
	assert( !q1.isEmpty() );
	assert( !q1.isFull() );
	assert( q1.getFirst() == 11 );
	assert( q1.getLast() == 33 );
	cout << " 3 " << flush;
	q1.append(44);
	assert( !q1.isEmpty() );
	assert( q1.isFull() );
	assert( q1.getFirst() == 11 );
	assert( q1.getLast() == 44 );
	cout << " 4 " << flush;
	// append to full queue
	try {
		q1.append(55);
		cerr << "\nappend() worked on full queue\n";
		exit(1);
	} catch (FullQueueException fqe) {
		cout << " 5 " << flush;
	}
	cout << "Passed!" << endl;
}

void ArrayQueueTester::testConstructor() {
	cout << "- testing constructor... " << flush;
	// try with capacity zero
	try {
		ArrayQueue <double> q1(0);
		cerr << "Constructed Queue with capacity zero" << endl;
		exit(1);
	} catch (QueueException qe) {
	    cout << " 1 " << flush;
	}

	// positive capacity
	ArrayQueue <double> q2(3);
	assert( q2.isEmpty() );
	assert( !q2.isFull() );
	assert( q2.myCapacity == 3 );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

/* testSetCapacity() for an array-based Queue class.
 * Author: Dan Brown, for CS 112 at Calvin College.
 * Date: May, 2008.
 */

void ArrayQueueTester::testSetCapacity(){
	
	cout << "Testing setCapacity()..." << flush;

	//Test changing capacity on an empty queue
	ArrayQueue<int> q1(1);
	assert( q1.getCapacity() == 1 );
	assert( q1.getSize() == 0 );
	assert( q1.isEmpty() );
	assert( !q1.isFull() );

	//increase the capacity
	q1.setCapacity(10);
	assert( q1.getCapacity() == 10 );
	assert( q1.getSize() == 0 );
	assert( q1.isEmpty() );
	assert( !q1.isFull() );
	cout << " 1a" << flush;

	//decrease the capacity
	q1.setCapacity(5);
	assert( q1.getCapacity() == 5 );
	assert( q1.getSize() == 0 );
	assert( q1.isEmpty() );
	assert( !q1.isFull() );
	cout << " 1b" << flush;

	//try setting the capacity to zero
	try{
		q1.setCapacity(0);
		cerr << "setCapacity(0) worked!" << endl;
		exit(1);
	} catch ( QueueException e ) {
		//check to make sure nothing was changed
		assert( q1.getCapacity() == 5 );
		assert( q1.getSize() == 0 );
		assert( q1.isEmpty() );
		assert( !q1.isFull() );
		cout << " 1c" << flush;

	}

	//Test changing capacity on a queue with items that
	//start at the beginning of the array
	ArrayQueue<int> q2(5);
	for (int i = 0; i < 5; i++){
		q2.append(i+1);
	}
	assert( q2.getCapacity() == 5 );
	assert( q2.getSize() == 5 );
	assert( !q2.isEmpty() );
	assert( q2.isFull() );
	assert( q2.getFirst() == 1 );
	assert( q2.getLast() == 5 );

	//increase the capacity
	q2.setCapacity(10);
	assert( q2.getCapacity() == 10 );
	assert( q2.getSize() == 5 );
	assert( !q2.isEmpty() );
	assert( !q2.isFull() );
	assert( q2.getFirst() == 1 );
	assert( q2.getLast() == 5 );
	cout << " 2a" << flush;

	//check to make sure appending still works
	q2.append(6);
	assert( q2.getLast() == 6 );
	q2.append(7);
	q2.append(8);
	q2.append(9);
	q2.append(10);
	assert( q2.getCapacity() == 10 );
	assert( q2.getSize() == 10 );
	assert( !q2.isEmpty() );
	assert( q2.isFull() );
	assert( q2.getFirst() == 1 );
	assert( q2.getLast() == 10 );
	cout << " 2b" << flush;

	//check to make sure that removing still works
	assert( q2.remove() == 1 );
	assert( q2.remove() == 2 );
	assert( q2.remove() == 3 );
	assert( q2.remove() == 4 );
	assert( q2.remove() == 5 );
	assert( q2.remove() == 6 );
	assert( q2.remove() == 7 );
	assert( q2.remove() == 8 );
	assert( q2.remove() == 9 );
	assert( q2.remove() == 10 );
	assert( q2.getCapacity() == 10 );
	assert( q2.getSize() == 0 );
	assert( q2.isEmpty() );
	assert( !q2.isFull() );
	cout << " 2c" << flush;

	//set up a clean queue before continuing...
	ArrayQueue<int> q3(20);
	for (int i = 0; i < 5; i++){
		q3.append(i+1);
	}
	assert( q3.getCapacity() == 20 );
	assert( q3.getSize() == 5 );
	assert( !q3.isEmpty() );
	assert( !q3.isFull() );
	assert( q3.getFirst() == 1 );
	assert( q3.getLast() == 5 );

	//decrease the capacity
	q3.setCapacity(10);
	assert( q3.getCapacity() == 10 );
	assert( q3.getSize() == 5 );
	assert( !q3.isEmpty() );
	assert( !q3.isFull() );
	assert( q3.getFirst() == 1 );
	assert( q3.getLast() == 5 );
	cout << " 2d" << flush;
	
	//check to make sure appending still works
	q3.append(6);
	assert( q3.getLast() == 6 );
	q3.append(7);
	q3.append(8);
	q3.append(9);
	q3.append(10);
	assert( q3.getCapacity() == 10 );
	assert( q3.getSize() == 10 );
	assert( !q3.isEmpty() );
	assert( q3.isFull() );
	assert( q3.getFirst() == 1 );
	assert( q3.getLast() == 10 );
	cout << " 2e" << flush;

	//check to make sure that removing still works
	assert( q3.remove() == 1 );
	assert( q3.remove() == 2 );
	assert( q3.remove() == 3 );
	assert( q3.remove() == 4 );
	assert( q3.remove() == 5 );
	assert( q3.remove() == 6 );
	assert( q3.remove() == 7 );
	assert( q3.remove() == 8 );
	assert( q3.remove() == 9 );
	assert( q3.remove() == 10 );
	assert( q3.getCapacity() == 10 );
	assert( q3.getSize() == 0 );
	assert( q3.isEmpty() );
	assert( !q3.isFull() );
	cout << " 2f" << flush;

	//test setCapacity() on a queue that has items starting
	//in the middle of the array, not wrapping around
	ArrayQueue<int> q4(5);
	for (int i = 0; i < 5; i++){
		q4.append(i+1);
	}
	q4.remove();
	q4.remove();
	assert( q4.getCapacity() == 5 );
	assert( q4.getSize() == 3 );
	assert( !q4.isEmpty() );
	assert( !q4.isFull() );
	assert( q4.getFirst() == 3 );
	assert( q4.getLast() == 5 );

	//increase the capacity
	q4.setCapacity(10);
	assert( q4.getCapacity() == 10 );
	assert( q4.getSize() == 3 );
	assert( !q4.isEmpty() );
	assert( !q4.isFull() );
	assert( q4.getFirst() == 3 );
	assert( q4.getLast() == 5 );
	cout << " 3a" << flush;

	//check to make sure appending still works
	q4.append(6);
	q4.append(7);
	q4.append(8);
	q4.append(9);
	q4.append(10);
	q4.append(11);
	q4.append(12);
	assert( q4.getCapacity() == 10 );
	assert( q4.getSize() == 10 );
	assert( !q4.isEmpty() );
	assert( q4.isFull() );
	assert( q4.getFirst() == 3 );
	assert( q4.getLast() == 12 );
	cout << " 3b" << flush;

	//check to make sure removing still works
	assert( q4.remove() == 3 );
	assert( q4.remove() == 4 );
	assert( q4.remove() == 5 );
	assert( q4.remove() == 6 );
	assert( q4.remove() == 7 );
	assert( q4.remove() == 8 );
	assert( q4.remove() == 9 );
	assert( q4.remove() == 10 );
	assert( q4.remove() == 11 );
	assert( q4.remove() == 12 );
	assert( q4.getCapacity() == 10 );
	assert( q4.getSize() == 0 );
	assert( q4.isEmpty() );
	assert( !q4.isFull() );
	cout << " 3c" << flush;

	//create a clean queue before continuing...
	ArrayQueue<int> q5(10);
	for (int i = 0; i < 10; i++){
		q5.append(i+1);
	}
	for (int i = 0; i < 7; i++){
		q5.remove();
	}
	assert( q5.getCapacity() == 10 );
	assert( q5.getSize() == 3 );
	assert( !q5.isEmpty() );
	assert( !q5.isFull() );
	assert( q5.getFirst() == 8 );
	assert( q5.getLast() == 10 );

	//reduce the capacity
	q5.setCapacity(5);
	assert( q5.getCapacity() == 5 );
	assert( q5.getSize() == 3 );
	assert( !q5.isEmpty() );
	assert( !q5.isFull() );
	assert( q5.getFirst() == 8 );
	assert( q5.getLast() == 10 );//!!!!!!!!!!!!!!!!!!!!!
	cout << " 3d" << flush;

	//check to make sure appending still works
	q5.append(11);
	q5.append(12);
	assert( q5.getCapacity() == 5 );
	assert( q5.getSize() == 5 );
	assert( !q5.isEmpty() );
	assert( q5.isFull() );
	assert( q5.getFirst() == 8 );
	assert( q5.getLast() == 12 );
	cout << " 3e" << flush;

	//check to make sure removing still works
	assert( q5.remove() == 8 );
	assert( q5.remove() == 9 );
	assert( q5.remove() == 10 );
	assert( q5.remove() == 11 );
	assert( q5.remove() == 12 );
	assert( q5.getCapacity() == 5 );
	assert( q5.getSize() == 0 );
	assert( q5.isEmpty() );
	assert( !q5.isFull() );
	cout << " 3f" << flush;

	//test setCapacity() on a queue with values that
	//wrap around the array
	ArrayQueue<int> q6(5);
	for (int i = 0; i < 5; i++){
		q6.append(i+1);
	}
	q6.remove();
	q6.remove();
	q6.remove();
	q6.append(6);
	q6.append(7);
	assert( q6.getCapacity() == 5 );
	assert( q6.getSize() == 4 );
	assert( !q6.isEmpty() );
	assert( !q6.isFull() );
	assert( q6.getFirst() == 4 );
	assert( q6.getLast() == 7 );

	//increase the capacity
	q6.setCapacity(10);
	assert( q6.getCapacity() == 10 );
	assert( q6.getSize() == 4 );
	assert( !q6.isEmpty() );
	assert( !q6.isFull() );
	assert( q6.getFirst() == 4 );
	assert( q6.getLast() == 7 );
	cout << " 4a" << flush;

	//check to make sure appending still works
	q6.append(8);
	q6.append(9);
	q6.append(10);
	q6.append(11);
	q6.append(12);
	q6.append(13);
	assert( q6.getCapacity() == 10 );
	assert( q6.getSize() == 10 );
	assert( !q6.isEmpty() );
	assert( q6.isFull() );
	assert( q6.getFirst() == 4 );
	assert( q6.getLast() == 13 );
	cout << " 4b" << flush;

	//check to make sure removing still works
	assert( q6.remove() == 4 );
	assert( q6.remove() == 5 );
	assert( q6.remove() == 6 );
	assert( q6.remove() == 7 );
	assert( q6.remove() == 8 );
	assert( q6.remove() == 9 );
	assert( q6.remove() == 10 );
	assert( q6.remove() == 11 );
	assert( q6.remove() == 12 );
	assert( q6.remove() == 13 );
	assert( q6.getCapacity() == 10 );
	assert( q6.getSize() == 0 );
	assert( q6.isEmpty() );
	assert( !q6.isFull() );
	cout << " 4c" << flush;

	//set up a clean queue before continuing...
	ArrayQueue<int> q7(10);
	for(int i = 0; i < 10; i++){
		q7.append(i+1);
	}
	for(int i = 0; i < 8; i++){
		q7.remove();
	}
	q7.append(11);
	q7.append(12);
	assert( q7.getCapacity() == 10 );
	assert( q7.getSize() == 4 );
	assert( !q7.isEmpty() );
	assert( !q7.isFull() );
	assert( q7.getFirst() == 9 );
	assert( q7.getLast() == 12 );

	//reduce the capacity
	q7.setCapacity(6);
	assert( q7.getCapacity() == 6 );
	assert( q7.getSize() == 4 );
	assert( !q7.isEmpty() );
	assert( !q7.isFull() );
	assert( q7.getFirst() == 9 );
	assert( q7.getLast() == 12 );
	cout << " 4d" << flush;

	//check to make sure appending still works
	q7.append(13);
	q7.append(14);
	assert( q7.getCapacity() == 6 );
	assert( q7.getSize() == 6 );
	assert( !q7.isEmpty() );
	assert( q7.isFull() );
	assert( q7.getFirst() == 9 );
	assert( q7.getLast() == 14 );
	cout << " 4e" << flush;

	//check to make sure removing still works
	assert( q7.remove() == 9 );
	assert( q7.remove() == 10 );
	assert( q7.remove() == 11 );
	assert( q7.remove() == 12 );
	assert( q7.remove() == 13 );
	assert( q7.remove() == 14 );
	assert( q7.getCapacity() == 6 );
	assert( q7.getSize() == 0 );
	assert( q7.isEmpty() );
	assert( !q7.isFull() );
	cout << " 4f" << flush;

	//try reducing capacity to less than the current size
	ArrayQueue<int> q8(10);
	for( int i = 0; i < 8; i++){
		q8.append(i+1);
	}
	assert( q8.getCapacity() == 10 );
	assert( q8.getSize() == 8 );
	assert( !q8.isEmpty() );
	assert( !q8.isFull() );
	assert( q8.getFirst() == 1 );
	assert( q8.getLast() == 8 );
	
	try{
		q8.setCapacity(5);
		cerr << "setCapacity worked with new capacity < size" << endl;
		exit(1);
	} catch (QueueException e) {
		//check to make sure nothing changed
		assert( q8.getCapacity() == 10 );
		assert( q8.getSize() == 8 );
		assert( !q8.isEmpty() );
		assert( !q8.isFull() );
		assert( q8.getFirst() == 1 );
		assert( q8.getLast() == 8 );
		assert( q8.remove() == 1 );
		assert( q8.remove() == 2 );
		assert( q8.remove() == 3 );
		assert( q8.remove() == 4 );
		assert( q8.remove() == 5 );
		assert( q8.remove() == 6 );
		assert( q8.remove() == 7 );
		assert( q8.remove() == 8 );
		cout << " 5" << flush;
	}

	// copy a full queue, where myFirst && myLast are not zero,
	// so newer items precede older items in the queue
	// (thanks to Christpher Hesters).
	ArrayQueue<int> q9(3);
	q9.append(11);
	q9.append(12);
	q9.append(13);
	assert(q9.remove() == 11);
	q9.append(14);
	assert(q9.remove() == 12);
	q9.append(15);
	q9.setCapacity(4);
	assert(q9.getCapacity() == 4);
	assert(q9.getFirst() == 13);
	assert(q9.getLast() == 15);
	assert(q9.remove() == 13);
	assert(q9.getFirst() == 14);
	assert(q9.getLast() == 15);
	assert(q9.remove() == 14);
	assert(q9.getFirst() == 15);
	assert(q9.getLast() == 15);
	assert(q9.remove() == 15);
	cout << " 6" << flush;

	cout << " Passed!" << endl;

}	



/*
 * THis is the class that detects palindromes. It works by inserting only the alphanumaric
 * characters into both a stack and a queue. THen, since one is lifo and the other fifo,
 * you can compare a reversed line to a normal line. If they match, then its a palindrome.
 * inFile:name of txt file to detect palindromes
 * outFile:where to dump results. Detected palindromes have a *** after the line
 * by Joshua Maguire on 4/16/2013
 */
#include "Palindrome.h"
//simple constructor. Used if you want to create a Palindrome object
//and only use the isPalindrome method, which doesn't need in or out files/streams.
Palindrome::Palindrome()
{
}
//constructor
//string in: name of txt file to detect palindromes
//string out: name of txt file to dump detected palindromes
Palindrome::Palindrome(string in,string out)
{
	inFile = in;
	outFile = out;
}

//destructor
Palindrome::~Palindrome(void)
{
}

/*
 * method for detecting palindromes from txt file.
 * Using string thisLine, it passes each line of
 * the txt file to the isPalindrome method, which returns
 * a bool. If is palindrome, "***" is printed at the end of
 * the line. Then new line fetched.
 * Postcondition: outFile dumps inFiles contents with *** at end of palindromes
 */
void Palindrome::detectPalindromes()
{
	ifstream in(inFile.c_str());
	ofstream out(outFile.c_str());
	assert(out.is_open());
	assert(in.is_open());
	string thisLine;
	while(!in.eof())
	{
		getline(in,thisLine);
		out << thisLine<<flush;
		if(isPalindrome(thisLine))
		{
			out << "***"<<flush;
		}
		out  << endl;
	}

}
/*
 * isPalindrome
 * Args: string line: string of chars, can be spaces or symbols.
 * postcondition:returns bool
 */
bool Palindrome::isPalindrome(string line)
{
	Stack<char> s1(1);
	ArrayQueue<char> q1(1);
	char charA;
	char charB;
	for(unsigned i = 0; i < line.size();i++)		//filling stack and queue
	{
		charA=line[i];
		if(isalnum(charA))
		{
			charA=tolower(charA);//lowercase
			try							//pushing line to stack...
			{
				s1.push(charA);
			}catch (StackException se)
			{
				s1.setCapacity(2*s1.getCapacity());
				s1.push(charA);
			}
			// line pushed to stack.
			try							//appending line to queue
			{
				q1.append(charA);
			}catch (FullQueueException fqe)
			{
				q1.setCapacity(q1.getCapacity()*2);
				q1.append(charA);
			}							//line appended to queue
		}													
	}	
											//stack and queue filled
	if(s1.isEmpty()){return false;}
	for(unsigned i = 0;i<q1.getSize();i++)//comparing
	{
		charA=q1.remove();
		charB=s1.pop();
		if(charB!=charA){return false;}
	}
	return true;
}
#include "PalindromeTester.h"


PalindromeTester::PalindromeTester(void)
{
}


PalindromeTester::~PalindromeTester(void)
{
}

void PalindromeTester::runTests()
{
	cout << ("testing PalindromeDetector...") << flush;
	Palindrome p1;
	assert(!p1.isPalindrome("abc"));//not pal
	assert(!p1.isPalindrome("big not     pal&ind%om@e"));//not pal
	assert(p1.isPalindrome("bob"));//is pal
	assert(p1.isPalindrome("qpwoeiruurieowpq")); //is pal
	assert(p1.isPalindrome("b#ob% b*ob. b,ob,,,")); //is pal while ignoring symblos
	assert(!p1.isPalindrome(""));//not pal
	assert(p1.isPalindrome("12321"));
	assert(!p1.isPalindrome("23745980"));
	assert(p1.isPalindrome("hanah, 101, &HaNaH")); //more should ignore symblols
	assert(p1.isPalindrome("12lol21"));//nums and letters, is pal
	assert(p1.isPalindrome("lol101lol"));//letters then nums
	assert(!p1.isPalindrome("$^&%,.,;][}{"));//not pal, should ignore symbles
	assert(!p1.isPalindrome(" $^ &%,.,   ;][ }{  "));//not pal, should ignore symbosl
	assert(!p1.isPalindrome("         "));//not pal, should ignore spaces
	cout << "passed!" << endl;
	cout << "detecting Drawn Onward Palindromes..." << endl;
	Palindrome p9("somepalindromes.txt","PalindromeResults.txt");
	p9.detectPalindromes();
	cout << "done!" << endl;
}
/* tester.cpp drives the testing of the Queue classes.
 * Joel Adams, for CS 112 at Calvin College.
 */

 #include "ArrayQueueTester.h"
 #include "LinkedQueueTester.h"
#include "PalindromeTester.h"
 
 int main() {
 	ArrayQueueTester aqt;
 	aqt.runTests();
 	LinkedQueueTester lqt;
 	lqt.runTests();
	PalindromeTester p1;
	p1.runTests();
 }
 
 /* ArrayQueue.h declares a Queue class using a dynamic array.
* Begun by: Joel Adams, for CS 112 at Calvin College.
* Student name:Joshua Maguire
* Date:4/9/13
* 
* Class Invariant: 
*    mySize == 0 ||
*    mySize > 0 && myArray[myFirst] == getFirst()
*               && myArray[myLast-1] == getLast().
* 
*  (When I am not empty:
*     myFirst is the index of my oldest value;
*     myLast is the index of the spot where the next
*       item to be appended will be placed.)      
*/


#ifndef ARRAY_QUEUE_H_
#define ARRAY_QUEUE_H_

#include "QueueException.h"
#include "ArrayQueue.h"
#include <cstring>      // memcpy()
using namespace std;

template<class Item>

class ArrayQueue {
public:
	ArrayQueue(unsigned size);
	ArrayQueue(const ArrayQueue& original);
	virtual ~ArrayQueue();
	ArrayQueue& operator=(const ArrayQueue& original);
	unsigned getSize() const;
	unsigned getCapacity() const;
	bool isEmpty() const;
	bool isFull() const;
	Item getFirst() const;
	Item getLast() const;
	void append(Item it);
	Item remove();
	void setCapacity(unsigned cap);

protected:
	virtual void makeCopyOf(const ArrayQueue& original);
private:
	unsigned mySize;       // number of items I contain
	unsigned myCapacity;   // how many items I can store
	unsigned myFirst;      // index of oldest item (if any)
	unsigned myLast;       // index of next available spot for append (if any)
	Item*    myArray;      // dynamic array of items

	friend class ArrayQueueTester;
};
template<class Item>
ArrayQueue<Item>::ArrayQueue(unsigned size)
{
	if(size<1){throw QueueException ("ArrayQueue::ArrayQueue","capacity was less than 1");}
	mySize = 0;
	myCapacity = size;
	myFirst = 0;
	myLast = 0;
	myArray = new Item[size];

}
template<class Item>
ArrayQueue<Item>::ArrayQueue(const ArrayQueue<Item>& original) {
	makeCopyOf(original);
}
template<class Item>
void ArrayQueue<Item>::makeCopyOf(const ArrayQueue<Item>& original) {
	mySize = original.mySize;
	myCapacity = original.myCapacity;
	myFirst = original.myFirst;
	myLast = original.myLast;
	myArray = new Item[myCapacity];
	memcpy(myArray, original.myArray, myCapacity*sizeof(Item) );
}
template<class Item>
ArrayQueue<Item>::~ArrayQueue() {
	delete [] myArray;
	myArray = NULL;
	mySize = myFirst = myLast = 0;
}

template<class Item>
ArrayQueue<Item>& ArrayQueue<Item>::operator=(const ArrayQueue<Item>& aQueue) {
	if (this != &aQueue) {
		delete [] myArray;;
		makeCopyOf(aQueue);
	}
	return *this;
}
template<class Item>
bool ArrayQueue<Item>::isEmpty() const {
	return mySize == 0;
}
template<class Item>
bool ArrayQueue<Item>::isFull() const {
	return getSize() == myCapacity;
}
template<class Item>
unsigned ArrayQueue<Item>::getCapacity() const {
	return myCapacity;
}
template<class Item>
unsigned ArrayQueue<Item>::getSize() const {
	return mySize;
}
template<class Item>
Item ArrayQueue<Item>::getFirst() const{
	if(isEmpty()){throw EmptyQueueException("ArrayQueue::getFirst");}
	return myArray[myFirst];
}
template<class Item>
Item ArrayQueue<Item>::getLast() const{
	if(isEmpty()){throw EmptyQueueException("ArrayQueue::getLast");}
	return myArray[(myLast-1+myCapacity) % myCapacity];
}
template<class Item>
void ArrayQueue<Item>::append(Item it){
	if(isFull()){throw FullQueueException("ArrayQueue::append()");}
	myArray[myLast]=it;
	myLast = ((myLast+1) % myCapacity);
	mySize++;
}
template<class Item>
Item ArrayQueue<Item>::remove(){
	if(isEmpty()){throw EmptyQueueException("ArrayQueue::remove()");}
	Item result = myArray[myFirst];
	mySize--;
	myFirst=((myFirst+1)% myCapacity);
	return result;
}
//This method changes myCapacity to new unsigned capacity cat
//args:unsigned cap: new capacity, must be greater than the current myCapacity
//postcondition: myCapacity incramented, Array is now bigger, old Items coppied.
template<class Item>
void ArrayQueue<Item>::setCapacity(unsigned cap)
{
	if(cap<1||cap<mySize){throw QueueException ("ArrayQueue::setCapacity()","new capacity is less than 1 and or less than mySize!");}
	if(mySize>0)
	{
		Item* newArray = new Item[cap];
		unsigned tempIndex = myFirst;
		for (unsigned i = 0;i<mySize;i++)
		{
			newArray[i]=myArray[tempIndex];
			tempIndex=(tempIndex+1)%myCapacity;
		}
		delete [] myArray;
		myArray = newArray;
		myFirst=0;
		myLast=mySize;

	}
	myCapacity = cap;


}
#endif /*ARRAY_QUEUE_H_*/
/* ArrayQueueTester.h declares the class that tests class ArrayQueue.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#ifndef QUEUETESTER_H_
#define QUEUETESTER_H_

#include "ArrayQueue.h"

class ArrayQueueTester {
public:
	void runTests();
	void testConstructor();
	void testAppend();
	void testRemove();
	void testCopyConstructor();
	void testAssignment();
	void testSetCapacity();
};

#endif /*QUEUETESTER_H_*/


/*
 * THis is the class that detects palindromes. It works by inserting only the alphanumaric
 * characters into both a stack and a queue. THen, since one is lifo and the other fifo,
 * you can compare a reversed line to a normal line. If they match, then its a palindrome.
 * inFile:name of txt file to detect palindromes
 * outFile:where to dump results. Detected palindromes have a *** after the line
 * by Joshua Maguire on 4/16/2013
 *
 */
#ifndef PALINDROME_H_
#define PALINDROME_H_
#include <iostream>
#include <cassert>
#include <fstream>
#include "Stack.h"
#include "ArrayQueue.h"

using namespace std;

class Palindrome
{
public:
	Palindrome(string in,string out);
	Palindrome(void);
	~Palindrome(void);
	void detectPalindromes();
	bool isPalindrome(string line);
private:
	string inFile;
	string outFile;
};

#endif
/*
this is the tester class for testing Palindrome.cpp and .h.
by Joshua Maguire on 4/15/2013
*/


#ifndef PALINDROMETESTER_H_
#define PALINDROMETESTER_H_

#include "Palindrome.h"
#include <iostream>
using namespace std;


class PalindromeTester
{
public:
	PalindromeTester(void);
	~PalindromeTester(void);
	void runTests();
};

#endif



Drawn Onward

by Felicia Lamport
extended by Joel Adams        

The learned men of Rome
could turn a palindrome
but they were not the first.

For Adam, says the myth,
began conversing with
a sentence that reversed:
"Madam, I'm Adam"
seemed
a phrase to be esteemed
the moment it was popped.
But that was not to be
- his lady instantly said
"Eve"
which left it topped.

Eve damned Eden; mad Eve
bore two sons,
as goes the fable,
the first named
Cain, a maniac,
who slew his brother Able.
He lived as a devil, eh?
Violence begat violence, until today
we panic in a pew,
the cycle turns anew
and descendents of Ned Ludd
-- dumb mobs -- bomb mud.

Asked his favorite dessert, Archimedes said,
"I prefer PI"

And Napoleon, post-Josephine, mused,
"Able was I, ere I saw Elba,"
as he met his Waterloo, confused.

Anonymous, the most
prolific bard, can boast
of being host
to these:

"Was it a car or a cat I saw ?"

"Some men interpret nine memos."

"Lewd did I live, evil I did dwel."

"Sex at noon taxes."

"A man, a plan, a canal, Panama !"

"Stop, murder us not, tonsured rumpots !"

"Straw? No, too stupid a fad. I put soot on warts."

"Doc, note: I dissent. A fast never prevents a fatness. I diet on cod."

"Kay, a red nude, peeped under a yak."

and that marvel of marvels:

"Sit on a potato pan, Otis !"

What span, what palindromic bliss !
I've wrung the alphabet
repeatedly to get
a Janus-phrase so spry
at backwards somersaults.
But as each hope turns false,
in words, alas, drown I.

jlm54@torvalds:~/cs112/proj8$ cd debug[K[K[K[K[KDebug
jlm54@torvalds:~/cs112/proj8/Debug$ ls
ArrayQueue.obj		       link.5000.read.1.tlog
ArrayQueueTester.d	       link.5000.write.1.tlog
ArrayQueueTester.o	       link.5148-cvtres.read.1.tlog
ArrayQueueTester.obj	       link.5148-cvtres.write.1.tlog
cl.command.1.tlog	       link.5148-rc.read.1.tlog
CL.read.1.tlog		       link.5148-rc.write.1.tlog
CL.write.1.tlog		       link.5148.read.1.tlog
link.3732-cvtres.read.1.tlog   link.5148.write.1.tlog
link.3732-cvtres.write.1.tlog  link.5164-cvtres.read.1.tlog
link.3732-rc.read.1.tlog       link.5164-cvtres.write.1.tlog
link.3732-rc.write.1.tlog      link.5164-rc.read.1.tlog
link.3732.read.1.tlog	       link.5164-rc.write.1.tlog
link.3732.write.1.tlog	       link.5164.read.1.tlog
link.3744-cvtres.read.1.tlog   link.5164.write.1.tlog
link.3744-cvtres.write.1.tlog  link.6008-cvtres.read.1.tlog
link.3744-rc.read.1.tlog       link.6008-cvtres.write.1.tlog
link.3744-rc.write.1.tlog      link.6008-rc.read.1.tlog
link.3744.read.1.tlog	       link.6008-rc.write.1.tlog
link.3744.write.1.tlog	       link.6008.read.1.tlog
link.3780-cvtres.read.1.tlog   link.6008.write.1.tlog
link.3780-cvtres.write.1.tlog  link.8900-cvtres.read.1.tlog
link.3780-rc.read.1.tlog       link.8900-cvtres.write.1.tlog
link.3780-rc.write.1.tlog      link.8900-rc.read.1.tlog
link.3780.read.1.tlog	       link.8900-rc.write.1.tlog
link.3780.write.1.tlog	       link.8900.read.1.tlog
link.4268-cvtres.read.1.tlog   link.8900.write.1.tlog
link.4268-cvtres.write.1.tlog  link.command.1.tlog
link.4268-rc.read.1.tlog       link-cvtres.read.1.tlog
link.4268-rc.write.1.tlog      link-cvtres.write.1.tlog
link.4268.read.1.tlog	       LinkedQueue.d
link.4268.write.1.tlog	       LinkedQueue.o
link.4316-cvtres.read.1.tlog   LinkedQueue.obj
link.4316-cvtres.write.1.tlog  LinkedQueueTester.d
link.4316-rc.read.1.tlog       LinkedQueueTester.o
link.4316-rc.write.1.tlog      LinkedQueueTester.obj
link.4316.read.1.tlog	       link-rc.read.1.tlog
link.4316.write.1.tlog	       link-rc.write.1.tlog
link.4336-cvtres.read.1.tlog   link.read.1.tlog
link.4336-cvtres.write.1.tlog  link.write.1.tlog
link.4336-rc.read.1.tlog       makefile
link.4336-rc.write.1.tlog      objects.mk
link.4336.read.1.tlog	       Palindrome.d
link.4336.write.1.tlog	       PalindromeDetector.obj
link.4488-cvtres.read.1.tlog   Palindrome.o
link.4488-cvtres.write.1.tlog  Palindrome.obj
link.4488-rc.read.1.tlog       PalindromeTester.d
link.4488-rc.write.1.tlog      PalindromeTester.o
link.4488.read.1.tlog	       PalindromeTester.obj
link.4488.write.1.tlog	       proj8
link.4732-cvtres.read.1.tlog   Project8.lastbuildstate
link.4732-cvtres.write.1.tlog  Project8.log
link.4732-rc.read.1.tlog       sources.mk
link.4732-rc.write.1.tlog      Stack.obj
link.4732.read.1.tlog	       subdir.mk
link.4732.write.1.tlog	       tester.d
link.5000-cvtres.read.1.tlog   tester.o
link.5000-cvtres.write.1.tlog  tester.obj
link.5000-rc.read.1.tlog       vc110.idb
link.5000-rc.write.1.tlog      vc110.pdb
jlm54@torvalds:~/cs112/proj8/Debug$ male all
No command 'male' found, did you mean:
 Command 'ale' from package 'ale' (universe)
 Command 'make' from package 'make' (main)
 Command 'mame' from package 'mame' (multiverse)
male: command not found
jlm54@torvalds:~/cs112/proj8/Debug$ make all
make: Nothing to be done for `all'.
jlm54@torvalds:~/cs112/proj8/Debug$ cd ..
jlm54@torvalds:~/cs112/proj8$ ./Debug/proj8
Testing class ArrayQueue...
- testing constructor...  1  2  Passed!
- testing append(), getFirst(), getLast() ...  0a  0b  1  2  3  4  5 Passed!
- testing remove()...  0  1  2  3  4a  4b  4c  4d  5 Passed!
- testing copy constructor...  1  2  3 Passed!
- testing assignment...  1  2  3  4  5  6  7 Passed!
Testing setCapacity()... 1a 1b 1c 2a 2b 2c 2d 2e 2f 3a 3b 3c 3d 3e 3f 4a 4b 4c 4d 4e 4f 5 6 Passed!
All tests passed!

Testing class LinkedQueue...
- testing constructor...  Passed!
- testing append(), getFirst(), getLast(), ...  0a  0b  1  2  3  4 Passed!
- testing remove()...  0  1  2  3  4a  4b  4c  4d  5 Passed!
- testing copy constructor...  1  2 Passed!
- testing assignment...  1  2  3  4  5  6  7 Passed!
All tests passed!

testing PalindromeDetector...passed!
detecting Drawn Onward Palindromes...
done!
jlm54@torvalds:~/cs112/proj8$ cat PalindromeResults.txt
Drawn Onward***

by Felicia Lamport
extended by Joel Adams        

The learned men of Rome
could turn a palindrome
but they were not the first.

For Adam, says the myth,
began conversing with
a sentence that reversed:
"Madam, I'm Adam"***
seemed
a phrase to be esteemed
the moment it was popped.
But that was not to be
- his lady instantly said
"Eve"***
which left it topped.

Eve damned Eden; mad Eve***
bore two sons,
as goes the fable,
the first named
Cain, a maniac,***
who slew his brother Able.
He lived as a devil, eh?***
Violence begat violence, until today
we panic in a pew,***
the cycle turns anew
and descendents of Ned Ludd
-- dumb mobs -- bomb mud.***

Asked his favorite dessert, Archimedes said,
"I prefer PI"***

And Napoleon, post-Josephine, mused,
"Able was I, ere I saw Elba,"***
as he met his Waterloo, confused.

Anonymous, the most
prolific bard, can boast
of being host
to these:

"Was it a car or a cat I saw ?"***

"Some men interpret nine memos."***

"Lewd did I live, evil I did dwel."***

"Sex at noon taxes."***

"A man, a plan, a canal, Panama !"***

"Stop, murder us not, tonsured rumpots !"***

"Straw? No, too stupid a fad. I put soot on warts."***

"Doc, note: I dissent. A fast never prevents a fatness. I diet on cod."***

"Kay, a red nude, peeped under a yak."***

and that marvel of marvels:

"Sit on a potato pan, Otis !"***

What span, what palindromic bliss !
I've wrung the alphabet
repeatedly to get
a Janus-phrase so spry
at backwards somersaults.
But as each hope turns false,
in words, alas, drown I.***


jlm54@torvalds:~/cs112/proj8$ exit

Script done on Tue 16 Apr 2013 01:58:07 PM EDT

SOME FILES EMITTED TO SAVE TREES SO THAT BABY BIRDS CAN BE BORN IN THEM SO THAT WORMS DON'T OVERPOPULATE!!!
