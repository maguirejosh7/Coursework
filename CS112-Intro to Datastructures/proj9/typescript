Script started on Tue 23 Apr 2013 09:31:37 PM EDT
jlm54@chomsky:~/cs112/proj9$ ls
BST.h	       BST_Tester.cpp  duplicates.txt  treeheightresults.ods
bstReader.cpp  BST_Tester.h    Exception.h     treeheightresultspdf.pdf
bstReader.h    Debug	       tester.cpp      typescript
jlm54@chomsky:~/cs112/proj9$ cat */[K[K[K[K[K[Kcat *.h *.cpp *.txt
/* BST.h declares a "classic" binary search tree of linked nodes.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Joshua Maguire
 * Date:4/16/2013
 * 
 * Class Invariant:
 *   myNumItems == 0 && myRoot == NULL ||
 *   myNumItems > 0 && 
 *     myRoot stores the address of a Node containing an item &&
 *       all items in myRoot->myLeft are less than myRoot->myItem &&
 *       all items in myRoot->myRight are greater than myRoot->myItem.
 */

#ifndef BST_H_
#define BST_H_

#include "Exception.h"
#include <iostream>

using namespace std;

template <class Item>

class BST {
public:
	BST();
	virtual ~BST();
	bool isEmpty() const;
	unsigned getNumItems() const;
	void insert(const Item& it);
	bool contains(const Item& it) const;
	void traverseInorder();
	void traversePreorder();
	void traversePostorder();
	int getHeight() const;

private:
	struct Node {
	    Node(const Item& it);
            virtual ~Node();
			void insert(const Item& it);
			bool contains(const Item& it) const;
            void traverseInorder();
            void traversePreorder();
            void traversePostorder();
            virtual void processItem();
			int getHeight(int count) const;

		
            Item myItem;
            Node* myLeft;
            Node* myRight;
	};
	
	Node* myRoot;
	unsigned myNumItems;
	friend class BST_Tester;
};

template <class Item>
BST<Item>::BST()
{
	myRoot=NULL;
	myNumItems=0;
}

template <class Item>
BST<Item>::~BST() {
	delete myRoot;
	myRoot = NULL;
	myNumItems = 0;
}

template <class Item>
BST<Item>::Node::Node(const Item& it) {
	myItem = it;
	myLeft = NULL;
	myRight = NULL;
}

template <class Item>
BST<Item>::Node::~Node() {
	delete myLeft;
	delete myRight;
}

template <class Item>
bool BST<Item>::isEmpty() const {
	return myNumItems == 0;
}

template <class Item>
unsigned BST<Item>::getNumItems() const {
	return myNumItems;
}

template <class Item>
void BST<Item>::traversePreorder() {
	if ( !isEmpty() ) {
		myRoot->traversePreorder();
	}
}

template <class Item>
void BST<Item>::Node::traversePreorder() {
	processItem();
	if (myLeft != NULL) {
		myLeft->traversePreorder();
	}
	if (myRight != NULL) {
		myRight->traversePreorder();
	}
}

template <class Item>
void BST<Item>::Node::processItem() {
	cout << ' ' << myItem;
}

/*
This method searches through a tree and outputs 
its values after recursion has taken place(from right to left).
Recursion happens in the method below this one.
Post condition: i've couted the values in this tree
in a perticular order.
*/
template <class Item>
void BST<Item>::traversePostorder() {
	if ( !isEmpty() ) {
		myRoot->traversePostorder();
	}
}

template <class Item>
void BST<Item>::Node::traversePostorder() {
	if (myLeft != NULL) {
		myLeft->traversePostorder();
	}
	if (myRight != NULL) {
		myRight->traversePostorder();
	}
	processItem();
}

/*
This method searches through a tree and outputs 
its values in the right order.
Recursion happens in the method below this one.
Post condition: i've couted the values in this tree
in order.
*/
template <class Item>
void BST<Item>::traverseInorder() {
	if ( !isEmpty() ) {
		myRoot->traverseInorder();
	}
}

template <class Item>
void BST<Item>::Node::traverseInorder() {
	if (myLeft != NULL) {
		myLeft->traverseInorder();
	}
	processItem();
	if (myRight != NULL) {
		myRight->traverseInorder();
	}

}

template <class Item>
void BST<Item>::insert(const Item& it)
{
	if(myRoot==NULL)//empty tree case
	{
		myRoot=new Node(it);
		myNumItems++;
	}
	else
	{
		try{myRoot->insert(it);}catch (exception e1) {throw e1;}
		myNumItems++;
	}
}

template <class Item>
void BST<Item>::Node::insert(const Item& it)
{
	if(myItem==it){throw Exception("void BST::Node::insert(const Item& it)","Item already in BST!");}
	if(myLeft==NULL&& it < myItem)
	{
		myLeft=new Node(it);
		return;
	}
	else if(myRight==NULL&& it > myItem)
	{
		myRight=new Node(it);
		return;
	}
	else
	{
		if(it < myItem){myLeft->insert(it);}
		else{myRight->insert(it);}
	}
}

/*
This method searches through the binary search tree for a specific value it.
@param:const Item& it: the item im searching for
postcondition: returns bool
*/
template <class Item>
bool BST<Item>::contains(const Item& it) const
{
	if(myRoot==NULL){return false;}
	myRoot->contains(it);
}

/*
This is the Node method for the above method. It is recursive.
@param:const Item& it: the item im searching for
postcondition: returns bool
*/
template <class Item>
bool BST<Item>::Node::contains(const Item& it) const
{
	if(myItem==it){return true;}
	else if(myLeft!=NULL&&it<myItem){myLeft->contains(it);}
	else if(myRight!=NULL&&it>myItem){myRight->contains(it);}
	else{return false;}
}

/*
This method searches through a bst to figure out its height.
the Height is how "tall" a tree is: how many mods it is tall.
postcondition: returns how tall it is (int)
*/
template<class Item>
int BST<Item>::getHeight() const
{
	if(!myRoot){return 0;}
	return myRoot->getHeight(0);
}

/*
The node recursive node method for the above method
the Height is how "tall" a tree is: how many mods it is tall.
postcondition: returns how tall it it is from this nodes perspective(without
looking up). so if a tree is 5 tall, but were at a node 2 down, then from
that nodes perspective its 3 tall, and returns 3.
@param count:current height in tree
post condition:returns height of current node(from top to bottom)
*/
template<class Item>
int BST<Item>::Node::getHeight(int count) const
{
	int lCount=0;
	int rCount=0;
	if (myLeft != NULL)
	{
		lCount=myLeft->getHeight(count);
	}
	if (myRight != NULL) 
	{
		rCount=myRight->getHeight(count);
	}
	count++;
	if(lCount>rCount){return lCount+count;}
	else{return rCount+count;}
}
#endif /*BST_H_*/

/* bstReader.h declars a bstReader which
 * reads in a txt file with ints, sstores them in a BST
 * and then retrieves the height. call like this:
 *			bstReader bst0;
 *			bst0.getHeights();
 * Joshua Maguire, for CS 112 at Calvin College.
 * Date:4/23/2013
 */

#ifndef bstReader_H_
#define bstReader_H_

#include <cassert>
#include <iostream>
#include <fstream>
#include "BST_Tester.h"

using namespace std;

class bstReader
{
public:
	bstReader();
	~bstReader(void);
	void getHeights() const;
private:
	

};

#endif/* BST_Tester.h declares a class to test class BST.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef BST_TESTER_H_
#define BST_TESTER_H_


#include "BST.h"
#include <iostream>
using namespace std;

class BST_Tester
{
public:
	void runTests();
	void testConstructor();
	void testInsert();
	void testContains();
	void testTraverse();
	void testGetHeight();
};

#endif /*BST_TESTER_H_*/
/* Exception.h defines a class to consolidate the functionality
 *  that different kinds of exceptions have in common.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef EXCEPTION_H_
#define EXCEPTION_H_

#include <string>    // string
#include <iostream>  // ostream
using namespace std;

class Exception {
public:
   /* construct an Exception
    * Parameters: whereThrown, a string naming the method that threw me.
    *              message, a description of the problem.
    */
   Exception(const string& whereThrown, const string& message) { 
      myLocation = whereThrown; 
      myMessage = message; 
   }
   
   virtual ~Exception() {}
   
   /* build a string representation of myself
    * (polymorphic, in case you want to override it)
    */
   virtual string asString() const { 
   	  return "*** " + className() + " in " + myLocation + ": " + myMessage; 
   }
   
   /* polymorphic method to retrieve the name of the class
    *  (used by asString() above)
    */
   virtual string className() const {
   	  return "Exception";
   }

private:
   string myLocation;    // the method where I was thrown
   string myMessage;     // a description of the problem
};  // Exception

/* insert an Exception (or its subclass) into an ostream
 * Parameters: out, an ostream;
 *             e, an Exception.
 * Postcondition: out contains e's string representation
 *               && out is the return-value.
 */
inline ostream& operator<<(ostream& out, const Exception& e) {
	out << e.asString();
	return out;
}
      
#endif /*EXCEPTION_H_*/
/* bstReader.cpp houses methods for a bstReader which
 * reads in a txt file with ints, sstores them in a BST
 * and then retrieves the height. call like this:
 *			bstReader bst0;
 *			bst0.getHeights();
 * Joshua Maguire, for CS 112 at Calvin College.
 * Date:4/23/2013
 */
#include "bstReader.h"

bstReader::bstReader()
{
}

bstReader::~bstReader(void)
{
}

/* 
This method asks for a txt name, reads values into a BST,
and retrieves the height. If duplicates are found, couts an 'x',
otherwise progress is shown as '.'s. duplicates (if any) are 
dumped in 'duplicates.txt'. Thankyou and goodnight.
 */
void bstReader::getHeights() const
{
	string inputFile;
	cout << "\nEnter name/location of txt file (example file.txt) :"<< flush;
	cin >> inputFile;
	cout << "reading values from file..." << flush;
	ifstream in(inputFile.data());
	assert(in.is_open());
	ofstream out("duplicates.txt");
	assert(out.is_open());
	BST<long long> bst1;
	int dupCounter=0;
	long long  numLine;
	in>>numLine;
	int progress =0;//for progress bar
	while(!in.eof())
	{
		try
		{
			bst1.insert(numLine);
		}catch (Exception e1)
		{
			dupCounter++;
			out<<numLine<<endl;
			cout << "x" << flush;
		}
		progress++;
		if(progress==100000){cout<<"."<<flush;progress=0;}//progress bar. x's mean duplicate
		in>>numLine;
	}
	cout<<"\nbst from "<<inputFile<<"is "<<bst1.getHeight()<<" tall with "<<dupCounter<<" duplicates."<<endl;
}/* BST_Tester.cpp defines test-methods for class BST.
* Joel Adams, for CS 112 at Calvin College.
*/

#include "BST_Tester.h"
#include <cassert>

void BST_Tester::runTests() {
	cout << "Testing class BST" << endl;
	testConstructor();
	testInsert();
	testContains();
	testTraverse();
	testGetHeight();
	cout << "All tests passed!" << endl;
}

void BST_Tester::testGetHeight() {
	cout << "Testing getHeight()..." << flush;
	BST<int> bst;
	// empty
	assert( bst.getHeight() == 0 );
	cout << " 0 " << flush;
	// balanced
	bst.insert(44);
	assert( bst.getHeight() == 1 );
	cout << " 1 " << flush;
	bst.insert(22);
	assert( bst.getHeight() == 2 );
	cout << " 2 " << flush;
	bst.insert(66);
	assert( bst.getHeight() == 2 );
	cout << " 3 " << flush;
	bst.insert(77);
	assert( bst.getHeight() == 3 );
	cout << " 4a " << flush;
	bst.insert(55);
	assert( bst.getHeight() == 3 );
	cout << " 4b " << flush;
	bst.insert(33);
	assert( bst.getHeight() == 3 );
	cout << " 4c " << flush;
	bst.insert(11);
	assert( bst.getHeight() == 3 );
	cout << " 4d " << flush;
	bst.insert(88);
	assert( bst.getHeight() == 4 );
	cout << " 4e " << flush;
	// chained ascending
      BST<int> bst2a;
      bst2a.insert(11);
      bst2a.insert(22);
      bst2a.insert(33);
      bst2a.insert(44);
      bst2a.insert(55);
      bst2a.insert(66);
      bst2a.insert(77);
      assert( bst2a.getHeight() == 7 );
      cout << " 5a " << flush;
	// chained descending
      BST<int> bst2b;
      bst2b.insert(77);
      bst2b.insert(66);
      bst2b.insert(55);
      bst2b.insert(44);
      bst2b.insert(33);
      bst2b.insert(22);
      bst2b.insert(11);
      assert( bst2b.getHeight() == 7 );
      cout << " 5b " << flush;
	// four 4-node permutations
	BST<int> bst3;
	bst3.insert(44);
	assert( bst3.getHeight() == 1 );
      cout << " 6a " << flush;
	bst3.insert(22);
	assert( bst3.getHeight() == 2 );
      cout << " 6b " << flush;
	bst3.insert(33);
	assert( bst3.getHeight() == 3 );
      cout << " 6c " << flush;
	bst3.insert(55);
	assert( bst3.getHeight() == 3 );
      cout << " 6d " << flush;
	BST<int> bst4;
	bst4.insert(44);
	assert( bst4.getHeight() == 1 );
      cout << " 7a " << flush;
	bst4.insert(33);
	assert( bst4.getHeight() == 2 );
      cout << " 7b " << flush;
	bst4.insert(22);
	assert( bst4.getHeight() == 3 );
      cout << " 7c " << flush;
	bst4.insert(55);
	assert( bst4.getHeight() == 3 );
      cout << " 7d " << flush;
	BST<int> bst5;
	bst5.insert(44);
	assert( bst5.getHeight() == 1 );
      cout << " 8a " << flush;
	bst5.insert(33);
	assert( bst5.getHeight() == 2 );
      cout << " 8b " << flush;
	bst5.insert(55);
	assert( bst5.getHeight() == 2 );
      cout << " 8c " << flush;
	bst5.insert(66);
	assert( bst5.getHeight() == 3 );
      cout << " 8d " << flush;
	BST<int> bst6;
	bst6.insert(44);
	assert( bst6.getHeight() == 1 );
      cout << " 9a " << flush;
	bst6.insert(33);
	assert( bst6.getHeight() == 2 );
      cout << " 9b " << flush;
	bst6.insert(66);
	assert( bst6.getHeight() == 2 );
      cout << " 9c " << flush;
	bst6.insert(55);
	assert( bst6.getHeight() == 3 );
      cout << " 9d " << flush;
	cout << " Passed!" << endl;
}


void BST_Tester::testTraverse() {
	cout << "Testing traverse()..." << endl;
	BST<double> bst;
	bst.insert(55);
	bst.insert(33);
	bst.insert(11);
	bst.insert(22);
	bst.insert(44);
	bst.insert(77);
	bst.insert(99);
	bst.insert(88);
	bst.insert(66);
	cout << "- Preorder: expecting: 55 33 11 22 44 77 66 99 88" << endl;
	cout << "- Got                :" << flush;
	bst.traversePreorder(); cout << endl;
	cout << "\n- Postorder: expecting: 22 11 44 33 66 88 99 77 55" << endl;
	cout << "- Got                 :" << flush;
	bst.traversePostorder(); cout << endl;
	cout << "\n- Inorder: expecting: 11 22 33 44 55 66 77 88 99" << endl;
	cout << "- Got               :" << flush;
	bst.traverseInorder(); cout << endl;
		cout << " Passed!" << endl;
}

void BST_Tester::testContains() {
	cout << "Testing contains()... " << flush;
	// empty bst
	BST<long> bst;
	assert( !bst.contains(55) );
	cout << " 1 " << flush;
	// non-empty bst
	bst.insert(55);
	assert( bst.contains(55) );
	cout << " 2 " << flush;
	
	bst.insert(33);
	bst.insert(77);
	assert( bst.contains(55) );
	assert( bst.contains(33) );
	assert( bst.contains(77) );
	assert( !bst.contains(11) );
	assert( !bst.contains(111) );
	cout << " 3 " << flush;
	
	bst.insert(11);
	bst.insert(22);
	bst.insert(44);
	bst.insert(66);
	bst.insert(88);
	bst.insert(99);
	for (int i = 1; i <= 100; i++) {
		if ( i % 11 ) {
			assert( !bst.contains(i) );
		} else {
			assert( bst.contains(i) );
		}
	}
	cout << " 4 " << flush;
	
	cout << " Passed!" << endl;
}

void BST_Tester::testInsert() {
	cout << "Testing insert()... " << flush;
	BST<short> bst;
	assert( bst.isEmpty() );
	cout << " 0 " << flush;
	bst.insert(55);
	assert( !bst.isEmpty() );
	assert( bst.myRoot != NULL );
	assert( bst.myRoot->myItem == 55 );
	assert( bst.myRoot->myLeft == NULL );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.getNumItems() == 1 );
	cout << " 1 " << flush;
	
	bst.insert(33);
	assert( bst.getNumItems() == 2 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft != NULL );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myItem == 33 );
	cout << " 2 " << flush;
	
	bst.insert(44);
	assert( bst.getNumItems() == 3 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myRight != NULL );
	assert( bst.myRoot->myLeft->myRight->myItem == 44 );
	cout << " 3 " << flush;

	bst.insert(11);
	assert( bst.getNumItems() == 4 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myLeft != NULL );
	assert( bst.myRoot->myLeft->myLeft->myItem == 11 );
	cout << " 4 " << flush;

	bst.insert(22);
	assert( bst.getNumItems() == 5 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myLeft->myRight != NULL );
	assert( bst.myRoot->myLeft->myLeft->myRight->myItem == 22 );
	cout << " 5 " << flush;

	bst.insert(77);
	assert( bst.getNumItems() == 6 );
	assert( bst.myRoot->myRight != NULL );
	assert( bst.myRoot->myRight->myItem == 77 );
	cout << " 6 " << flush;

	bst.insert(66);
	assert( bst.getNumItems() == 7 );
	assert( bst.myRoot->myRight->myLeft->myItem == 66 );
	cout << " 7 " << flush;

	bst.insert(99);
	assert( bst.getNumItems() == 8 );
	assert( bst.myRoot->myRight->myRight->myItem == 99 );
	cout << " 8 " << flush;

	bst.insert(88);
	assert( bst.getNumItems() == 9 );
	assert( bst.myRoot->myRight->myRight->myLeft->myItem == 88 );
	cout << " 9 " << flush;
	
	try {
		bst.insert(55);
	} catch (Exception e) {
		cout << " 10 " << flush;
	}
	
	try {
		bst.insert(11);
	} catch (Exception e) {
		cout << " 11 " << flush;
	}

	try {
		bst.insert(88);
	} catch (Exception e) {
		cout << " 12 " << flush;
	}
	
	bst.insert(111);
	assert( bst.getNumItems() == 10 );
	assert( bst.myRoot->myRight->myRight->myRight->myItem == 111 );
	cout << " 13 " << flush;
	
	cout << " Passed!" << endl;
}

void BST_Tester::testConstructor() {
	cout << "Testing constructor... " << flush;
	BST<int> bst;
	assert( bst.isEmpty() );
	assert( bst.getNumItems() == 0 );
	assert( bst.myRoot == NULL );
	assert( bst.myNumItems == 0 );
	cout << "Passed!" << endl;
}


#include "BST_Tester.h"
#include "bstReader.h"
int main() {
	BST_Tester bstt;
	bstt.runTests();	
	cout << "\n\n\n" << flush;
	bstReader bst0;
	bst0.getHeights();

	///home/cs/112/proj/09/randomInts01.txt
}jlm54@chomsky:~/cs112/proj9$ cd debug[K[K[K[K[KDebug
jlm54@chomsky:~/cs112/proj9/Debug$ ls
bstReader.d  BST_Tester.d  makefile    proj9	   subdir.mk  tester.o
bstReader.o  BST_Tester.o  objects.mk  sources.mk  tester.d
jlm54@chomsky:~/cs112/proj9/Debug$ make all
make: Nothing to be done for `all'.
jlm54@chomsky:~/cs112/proj9/Debug$ ..
..: command not found
jlm54@chomsky:~/cs112/proj9/Debug$ ./Debug/proj9
bash: ./Debug/proj9: No such file or directory
jlm54@chomsky:~/cs112/proj9/Debug$ ./Debug[K[K[K[K[K[K[Kcd .
jlm54@chomsky:~/cs112/proj9/Debug$ ./Debug/proj9\
> ./Debug/proj9
bash: ./Debug/proj9./Debug/proj9: No such file or directory
jlm54@chomsky:~/cs112/proj9/Debug$ ./D[K[K[Kla
la: command not found
jlm54@chomsky:~/cs112/proj9/Debug$ ls
bstReader.d  BST_Tester.d  makefile    proj9	   subdir.mk  tester.o
bstReader.o  BST_Tester.o  objects.mk  sources.mk  tester.d
jlm54@chomsky:~/cs112/proj9/Debug$ ./Debug/proj9
bash: ./Debug/proj9: No such file or directory
jlm54@chomsky:~/cs112/proj9/Debug$ ./Debug/proj9[K9
bash: ./Debug/proj9: No such file or directory
jlm54@chomsky:~/cs112/proj9/Debug$ cd..
cd..: command not found
jlm54@chomsky:~/cs112/proj9/Debug$ cd ..
jlm54@chomsky:~/cs112/proj9$ ./Debug/proj9
Testing class BST
Testing constructor... Passed!
Testing insert()...  0  1  2  3  4  5  6  7  8  9  10  11  12  13  Passed!
Testing contains()...  1  2  3  4  Passed!
Testing traverse()...
- Preorder: expecting: 55 33 11 22 44 77 66 99 88
- Got                : 55 33 11 22 44 77 66 99 88

- Postorder: expecting: 22 11 44 33 66 88 99 77 55
- Got                 : 22 11 44 33 66 88 99 77 55

- Inorder: expecting: 11 22 33 44 55 66 77 88 99
- Got               : 11 22 33 44 55 66 77 88 99
 Passed!
Testing getHeight()... 0  1  2  3  4a  4b  4c  4d  4e  5a  5b  6a  6b  6c  6d  7a  7b  7c  7d  8a  8b  8c  8d  9a  9b  9c  9d  Passed!
All tests passed!




Enter name/location of txt file (example file.txt) :/home/cs/112/proj/09/randomInts03.txt
reading values from file.............
bst from /home/cs/112/proj/09/randomInts03.txtis 47 tall with 0 duplicates.
jlm54@chomsky:~/cs112/proj9$ exit

Script done on Tue 23 Apr 2013 09:36:18 PM EDT
