;;; namer.el simulates and tests an e-LISP Name type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by:Joshua Maguire
;;; Date:04/11/14


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Name constructs a name from three strings.      ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Name(first middle last)
  (list first middle last)
)
Name


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst extracts the first name of a name object.;
;;; Receive: theName, a Name.                       
;;; Return: the first string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFirst(theName)
  (car theName)
)
getFirst


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle extracts the middle name of a name object.
;;; Receive: theName, a Name.                      
;;; Return: the second string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getMiddle (theName)
  (car (cdr theName))
)
getMiddle


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast extracts the last name of a name object.
;;; Receive: theName, a Name.                    
;;; Return: the third string in theName.       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getLast (theName)
  (car (cdr (cdr  theName)))
)
getLast


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName returns a full name in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFullName(theName)
  (concat (getFirst theName)
          " "
	  (getMiddle theName)
	  " "
	  (getLast theName))
)
getFullName



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName displays a name object.         
;;; Receive: theName, a Name,                 
;;;          buffer, the name of a buffer.   
;;; Output: the strings in theName to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun printName(theName theBuffer)
  (princ (getFullName theName) theBuffer)
  theName
)
printName


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; these three methods are mutator functions for
;; first, middle and last names. 
;; Recieve: aFirst/middle/last, a const string
;; Return:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun setFirst(theName aFirst)
  (setf (car theName) aFirst)
)
setFirst


(defun setMiddle(theName aMiddle)
  (setf (car (cdr theName)) aMiddle)
)
setMiddle


(defun setLast(theName aLast)
  (setf  (car (cdr (cdr  theName))) aLast)
)
setLast


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ; lfmi function, for a given Name, returns a 
 ; string giving its Last-First-MiddleInitial form.
 ; Recieve: a first, middle or last name
 ; Return: string in Last-First-MiddleInitial form
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lfmi (theName)
  (concat (getLast theName) " " (getFirst theName) " " (substring (getMiddle theName) 0 1))
;(list (car (cdr (cdr  theName))) (car theName) (subseq (car (cdr theName)) 0))
)
lfmi



(defun readName (aName)
  (setf aName (list (string(read-from-minibuffer)) (string(read-from-minibuffer))(string(read-from-minibuffer)) ))
)
readName




;  setf
;etl


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver for our Name functions. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (require 'cl)                              ; assert
  (setq aName (Name "John" "Paul" "Jones"))  ; build a Name
  (assert (equal (getFirst aName) "John" ))  ; test it
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFullName aName) "John Paul Jones" ))
  (setq buf (get-buffer "namer.el"))         ; buf = this buffer
  (assert (eq (printName aName buf) aName) ) ; output
  (terpri buf)                               ; newline
;;;;;;;;;;;;project tests;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setFirst aName "Hampster")
  (assert (equal (getFirst aName) "Hampster" ))  ; test it
  (setMiddle aName "Lee")
  (assert (equal (getMiddle aName) "Lee"))
  (setLast aName "Mister")
  (assert (equal (getLast aName) "Mister"))
  (princ (lfmi aName))
  (assert (equal (lfmi aName) "Mister Hampster L"))
  (terpri buf)     
 ; (readName aName)

  (princ "All tests passed!")                ; feedback
  (terpri buf))      ; newline


John Paul Jones
Mister Hampster L
All tests passed!
t
