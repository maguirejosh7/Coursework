/* namer.cpp implements and tests class Name.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by:Joshua Maguire
 * Date:4/10/14
 */

#include <iostream>        // istream, ostream
#include <fstream>
#include <string>          // string
#include <cassert>         // assert()
using namespace std;

class Name
{
 public:                          // interface functions
	Name(const string & first, const string & middle, const string & last);
	string getFirst() const;
	string getMiddle() const;
	string getLast() const;
	string getFullName() const;
	void print(ostream & out);
	void readName(istream & in);
	string lfmi() const;
	void setFirst(const string & aFirst);
	void setMiddle(const string & aMiddle);
	void setLast(const string & aLast);
 private:
   string myFirst,
          myMiddle,
          myLast;
};


/**************************************************
* Name constructs a name from three strings.      *
* Receive: first, middle and last, three strings. *
* Return: the triplet (first middle last).        *
***************************************************/

Name::Name(const string & first, const string & middle, const string & last)
{
   myFirst = first;
   myMiddle = middle;
   myLast = last;
}

/***************************************************
 * getFirst() extracts the first name of a Name object. *
 * Return: myFirst.                                *
 ***************************************************/

string Name::getFirst() const
 {
   return myFirst;
 }

/*****************************************************
 * getMiddle() extracts the middle name of a Name object. *
 * Return: myMiddle.                                 *
 *****************************************************/

string Name::getMiddle() const
{
	return myMiddle;
}

/**************************************************
 * getLast() extracts the last name of a Name object.  *
 * Return: myLast.                                *
 **************************************************/

string Name::getLast() const
{
	return myLast;
}
/***************************************************
 * getFullName() returns a full name in F-M-L order.    *
 * Return: myFirst, myMiddle, myLast.              *
 ***************************************************/

string Name::getFullName() const
{
   return myFirst + ' ' + myMiddle + ' ' + myLast;
}

/****************************************************
 * print() displays a Name object.                    *
 * Receive: out, the name of a stream.              *
 * Output: the strings in theName to buffer.        *
 * POST: out contains myFirst, myMiddle and myLast. *
 ****************************************************/

void Name::print(ostream & out)
{
   out << getFullName();
}

/****************************************************
 * these three methods are mutator functions for
 * first, middle and last names. 
 * Recieve: aFirst/middle/last, a const string
 * Return:
 ***************************************************/
  void Name::setFirst(const string & aFirst) {
      myFirst = aFirst;
   }
   void Name::setMiddle(const string & aMiddle) {
      myMiddle = aMiddle;
   }
   void Name::setLast(const string & aLast) {
      myLast = aLast;
   }

/****************************************************
 * lfmi function, for a given Name, returns a 
 * string giving its Last-First-MiddleInitial form.
 * Recieve: a first, middle or last name
 * Return: string in Last-First-MiddleInitial form
 ***************************************************/
   string Name::lfmi() const {
      return myLast + ", " + myFirst + " " + myMiddle[0] + ".";
   }


/****************************************************
 * readName function reads in first, middle and 
 * last names via keyboard.
 ***************************************************/
  void Name::readName(istream & in) {
      in >> myFirst >> myMiddle >> myLast;
   }

/******************************************
 * a simple driver to test our Name type. *
 ******************************************/
int main()
{
  
  Name aName("John", "Paul", "Jones");
  ifstream testFile;
  testFile.open ("Tests.txt");
  assert( aName.getFirst() == "John" );
  assert( aName.getMiddle() == "Paul" );
  assert( aName.getLast() == "Jones" );
  assert( aName.getFullName() == "John Paul Jones" );
  aName.print(cout);  cout << endl;
  /////////////////////tests 2////////////////
  aName.setFirst("Tom");
  aName.setMiddle("Lee");
  aName.setLast("Mcgilly");
  assert( aName.getFullName() == "Tom Lee Mcgilly" );
  aName.print(cout);  cout << endl;
  aName.readName(testFile);
  aName.print(cout);  cout << endl;
  cout << aName.lfmi() << endl;
  cout << "\n\nAll tests passed! " << endl;
}

