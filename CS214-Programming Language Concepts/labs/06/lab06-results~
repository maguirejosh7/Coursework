Script started on Thu 20 Mar 2014 07:00:47 PM EDT
jlm54@hollerith:~/214/labs/06/c++$ cat average.cpp
/* average.cpp "test-drives" function Average.
 * Precondition: theArray is an array of numbers.
 * Output: the average of the values.
 *
 * Begun by: Dr. Adams, for CS 214 at Calvin College.
 * Completed by: Joshua Maguire
 * Date:3/20/14
 */

#include <numeric>
#include <iostream>
using namespace std;

double average(double anArray[], int itsSize);

int main() {

  double array0[0]; //..[]={};  or ..[0];..{};..
  double array1 [4]={9.0,8.0,7.0,6.0};
  
  cout << "\n average 1 is " << average(array0, 0) << endl;
  cout << "\n average 2 is " << average(array1, 4) << endl;
}

/*******************************************************
 * average averages the values in an array of doubles. *
 * Receive: anArray, an array of doubles.              *
 * Return: the average of the values in aVector.       *
 *******************************************************/

  double average(double anArray[], int itsSize)
   {
      if (itsSize <= 0) {
         return 0.0;
      } else {
         return accumulate(anArray, anArray+itsSize, 0.0) / itsSize;
      }
   }
jlm54@hollerith:~/214/labs/06/c++$ g++ average/cpp [K[K[K[K[K.cpp -Wall -o average
jlm54@hollerith:~/214/labs/06/c++$ ./average

 average 1 is 0

 average 2 is 7.5
jlm54@hollerith:~/214/labs/06/c++$ exit

Script done on Thu 20 Mar 2014 07:01:21 PM EDT
Script started on Thu 20 Mar 2014 09:20:04 PM EDT
jlm54@hollerith:~/214/labs/06/ada$ cat average.adb
-- average.adb "test-drives" function Average.
-- Precondition: theArray is an array of numbers.
-- Output: the average of the numbers.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:Joshua Maguire		
-- Date:3/20/14
-----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure average is


type Vector is array (Positive range <>) of Float;-- Declare Vector type

array0 : Vector := (0.0,0.0);
array1 : Vector := (9.0,8.0,7.0,6.0);

function sum(A: Vector) return Float is 
----------------------------------------------
-- sum() sums the values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the sum of the values in anArray. -
----------------------------------------------
  Total : Float := 0.0; 
  begin 
    for I in A'First..A'Last--or A'Range
    loop
      Total := Total + A(I);
    end loop; 
    return Total; 
end sum; 


function average(anArray : Vector) return Float is 
--average() averages the values in type Vector (array)
--recieve: a Vector of Floats
--return: the average of those values..
begin
	if ( anArray'Length = 2 and anArray(anArray'First) = 0.0 and anArray(anArray'Last) = 0.0) then--probably better way to do this, but it checks out
		return 0.0;
	else return sum(anArray)/Float(anArray'Length);
	end if;
end average;


begin
   Put(" average 0 is ");
   Put( average(array0) );
   New_line;
   Put(" average 1 is ");
   Put( average(array1) );
   New_line;
end average;

jlm54@hollerith:~/214/labs/06/ada$ gnatmake average.adb
gcc-4.6 -c average.adb
gnatbind -x average.ali
gnatlink average.ali
jlm54@hollerith:~/214/labs/06/ada$ ./average
 average 0 is  0.00000E+00
 average 1 is  7.50000E+00
jlm54@hollerith:~/214/labs/06/ada$ exit

Script done on Thu 20 Mar 2014 09:20:26 PM EDT
;;; average.el "test-drives" function average().
;;; Output: the average of a sequence of numbers.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by:Joshua Maguire
;;; Date: 3/21/14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; sum() sums the values in an array.         ;;
;;; Receive: anArray, an array of numbers,   ;;
;;;          itsSize, its size.              ;;
;;; Return: the sum of the values in anArray.;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun sum (anArray itsSize)
  (if (vectorp anArray); if its an array
      (if (<= itsSize 0) ;if size too small,
          0.0                       ;return 0.0
        (+ (aref anArray (- itsSize 1)) (sum anArray (- itsSize 1))))
    nil))
sum


 ;but otherwise, anArray[mysize-1] + sum(mysize-1) ...-1 because index starts at 0.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; average() computes the average of an array of numbers.;;
;;; Receive: anArray, an array of numbers.              ;;
;;; Return: the average of the numbers.                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun average (anArray)
  (if (vectorp anArray);if its an array
      (if (<= (length anArray) 0) 
	  0.0;if array length <= 0, return 0.0
	(/ (sum anArray (length anArray)) (length anArray)) ;else do this...
	)
    ))
average


;;; Test function sum
(sum [] 0)
0.0

(sum [9.0 8.0 7.0 6.0] 4)
30.0

;;; Test function average
(average [])
0.0


(average [9.0 8.0 7.0 6.0])
7.5
Script started on Thu 20 Mar 2014 09:05:02 PM EDT
jlm54@hollerith:~/214/labs/06/ruby$ cat average.rb
# average.rb averages the values of an array of doubles.
# Precondition: theArray is an array of numbers
# Output: the average of the values in theArray
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:: Joshua Maguire
# Date: 3/10/14
########################################################

###############################################
# sum() sums the values in an array
# Receive: anArray, an array of numbers
# Return: the sum of the values in anArray.
################################################
def sum(anArray)
	total = 0.0
	anArray.each {| num |total += num}#each "num"/element in anArray, total+= it.
	return total
end
###############################################
#average averages the values in an array. 
#Receive: anArray, an array.              
#Return: the average of the values. 
###############################################
def average(anArray)
	if (anArray.size <= 0) then return 0.0
	else return (sum(anArray)/anArray.size)
	end
end

#main
if __FILE__ == $0
   array0=Array.new
   array1=[6.0,7.0,8.0,9.0]
   puts "sum 0 is: #{ sum(array0) }\n"
   puts "sum 1 is: #{ sum(array1) }\n"
   puts "average 0 is: #{ average(array0) }\n"
   puts "average 1 is: #{ average(array1) }\n"
end

jlm54@hollerith:~/214/labs/06/ruby$ ruby average.rb
sum 0 is: 0.0
sum 1 is: 30.0
average 0 is: 0.0
average 1 is: 7.5
jlm54@hollerith:~/214/labs/06/ruby$ exit

Script done on Thu 20 Mar 2014 09:05:11 PM EDT
